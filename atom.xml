<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Abstract Nonsense</title>
    <link href="http://kovach.me/atom.xml" rel="self" />
    <link href="http://kovach.me" />
    <id>http://kovach.me/atom.xml</id>
    <author>
        <name>Benjamin Kovach</name>
        <email>bkovach13@gmail.com</email>
    </author>
    <updated>2017-06-22T00:00:00Z</updated>
    <entry>
    <title>Haskell Bits #6 - A Guide to Mutable References</title>
    <link href="http://kovach.me/posts/2017-06-22-mutable-references.html" />
    <id>http://kovach.me/posts/2017-06-22-mutable-references.html</id>
    <published>2017-06-22T00:00:00Z</published>
    <updated>2017-06-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<p>There are quite a few ways to store mutable data in Haskell. Let’s talk about some of them! Specifically, we will focus on mutable containers that store a single value that can be modified by one or more threads at any given time.</p>
<p>I’m not going to go into a ton of detail here - I just want to give an overview. I have provided links to the documentation and other resources at the end of each section for further reading.</p>
<h2 id="ioref">IORef</h2>
<p><img src="/images/HaskellRefs/ioref.png" height="400" style="display:block;margin:auto"></img></p>
<p>First up is <code>IORef</code>, the simplest of all containers. It is a sectioned off bit of mutable memory for any number of threads to read/modify willy-nilly.</p>
<p>We can read this diagram as follows:</p>
<ul>
<li>The whole action takes place in the <code>IO</code> monad/context.</li>
<li>A new <code>IORef</code> was created in <code>IO</code> somewhere and provided to two threads: <code>t1</code> and <code>t2</code>.</li>
<li>At some point, <code>t1</code> writes a value to the <code>IORef</code> using <code>writeIORef :: IORef a -&gt; a -&gt; IO a</code></li>
<li>A little later, <code>t2</code> writes a value to the same <code>IORef</code>.</li>
<li>Finally, <code>t1</code> reads the <code>IORef</code> using <code>readIORef :: IORef a -&gt; IO a</code></li>
</ul>
<p>The following diagrams will follow the same general struture: time increases as we move downwards along a thread, and certain actions are taken within those threads.</p>
<p><code>IORef</code>s are not very safe. They are highly succeptible to race conditions and other unintended behavior, and should be used with caution. For example, in our diagram: <code>t2</code> modifies the <code>IORef</code> after <code>t1</code> wrote to it - <code>t1</code> probably expected that <code>readIORef</code> would return whatever it placed there. That is not the case, because <code>t2</code> modified it between the write and read steps of <code>t1</code>.</p>
<ul>
<li><a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-IORef.html">Documentation for Data.IORef</a></li>
</ul>
<h2 id="mvar">MVar</h2>
<p><img src="/images/HaskellRefs/mvar.png" height="400" style="display:block;margin:auto"></img></p>
<p><code>MVar</code>s represent a location in memory that holds a value as well. However, <code>MVar</code>s come with the guarantee that no two threads are modifying a variable at the same time.</p>
<p>An <code>MVar</code> is either empty or full of an <code>a</code>. When we try to <code>takeMVar</code> on an empty <code>MVar</code>, the current thread blocks (indicated by a black line) until a value is put back into the <code>MVar</code>. <code>GHC</code>’s runtime is pretty good at determining when a thread is blocked indefinitely on an <code>MVar</code> read, so we don’t often have to worry about a thread hanging due to a bad program (for too long).</p>
<p><code>MVar</code>s are still succeptible to race conditions, but are great for simple concurrent tasks like synchronization and basic communication between threads.</p>
<ul>
<li><a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Concurrent-MVar.html">Documentation for Control.Concurrent.MVar</a></li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000929/ch07.html">More on MVars</a></li>
</ul>
<h2 id="tvar">TVar</h2>
<p><img src="/images/HaskellRefs/tvar.png" height="400" style="display:block;margin:auto"></img></p>
<p><code>TVar</code>s solve a different problem. They are associated with a mechanism called Software Transactional Memory - <code>STM</code> - - a construct that allows us to compose primitive operations and run them sequentially as a <em>transaction</em>. Think database transaction: if one <code>STM</code> action in a chain fails, all previous actions taken in that chain are rolled back accordingly.</p>
<p><code>TVar</code>s have a similar API to <code>MVar</code>, with one major difference: They can’t ever be empty. <s><code>TVar</code>s can only be used in a singular thread</s>, which is commonly executed as an atomic transaction using the function <code>atomically :: STM a -&gt; IO ()</code>.</p>
<p><code>STM</code> provides a bunch of very useful primitives for working with transactions, and is worth exploring:</p>
<p>EDIT: <code>TVar</code>s can be used in multiple threads. If a <code>TVar</code> is modified by a different thread during the execution of a transaction, the transaction is retried. <a href="https://www.reddit.com/r/haskell/comments/6iumes/haskell_bits_6_a_guide_to_mutable_references/dj9c1ju/"><code>/u/cgibbard</code> explains these semantics quite nicely in a comment on reddit</a>.</p>
<ul>
<li><a href="https://hackage.haskell.org/package/stm-2.4.4.1/docs/Control-Monad-STM.html">Documentation for Control.Monad.STM</a></li>
<li><a href="https://hackage.haskell.org/package/stm-2.4.4.1/docs/Control-Concurrent-STM-TVar.html">Documentation for Control.Concurrent.STM.TVar</a></li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000929/ch10.html">More on TVars and STM</a></li>
</ul>
<h2 id="tmvar">TMVar</h2>
<p><img src="/images/HaskellRefs/tmvar.png" height="400" style="display:block;margin:auto"></img></p>
<p>This diagram should look pretty familiar! <code>TMVar</code>s are a mash between <code>TVar</code>s and <code>MVar</code>s, as you might expect from its name. They can be composed transactionally just like <code>TVar</code>s, but can also be empty, and shared across many threads.</p>
<p>Since all of these <code>TMVar</code> actions live in <code>STM</code>, they can be run in the same manner as when we use regular <code>TVar</code>s.</p>
<ul>
<li><a href="https://hackage.haskell.org/package/stm-2.4.4.1/docs/Control-Concurrent-STM-TMVar.html">Documentation for Control.Concurrent.STM.TMVar</a></li>
</ul>
<h2 id="stref">STRef</h2>
<p><img src="/images/HaskellRefs/stref.png" height="400" style="display:block;margin:auto"></img></p>
<p><code>STRef</code>s are a completely different type of mutable container. They are restricted to a single thread, much like <code>TVar</code>s, but <em>guarantee</em> that they never escape (they are thread-local). They live in a context called <code>ST</code>, indicating a stateful thread.</p>
<p>The <code>s</code> value in the type of <code>ST</code> and <code>STRef</code> is a reference to the thread that the <code>ST</code> computation is allowed to access.</p>
<p><code>ST</code> and <code>STRef</code>s are mainly used to gain performance when you need to be closer to memory, but don’t want to give up safety.</p>
<ul>
<li><a href="https://wiki.haskell.org/Monad/ST">More on ST/STRef</a></li>
<li><a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-STRef.html">Documentation for Data.STRef</a></li>
</ul>
<p>Til next time!</p>
<p>Ben</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell Bits #5 - Easily working with JSON</title>
    <link href="http://kovach.me/posts/2017-05-11-easy-json.html" />
    <id>http://kovach.me/posts/2017-05-11-easy-json.html</id>
    <published>2017-05-11T00:00:00Z</published>
    <updated>2017-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<p>JSON is ubiquitous nowadays, perhaps most importantly for web APIs. We’ll probably need to interact with (or build) one of those at some point, so we must be able to handle JSON in Haskell, right?</p>
<p>Yep - also it’s pretty easy. Let’s talk about it! First, some boilerplate to get out of the way:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>
<span class="ot">{-# LANGUAGE DeriveGeneric #-}</span>
<span class="ot">{-# LANGUAGE TemplateHaskell #-}</span>
<span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span>
<span class="ot">{-# LANGUAGE FunctionalDependencies #-}</span>

<span class="kw">import </span><span class="dt">Control.Lens</span> ((^.), (^?))
<span class="kw">import </span><span class="dt">Control.Lens.TH</span>
<span class="kw">import </span><span class="dt">Data.Aeson.Lens</span>
<span class="kw">import </span><span class="dt">Data.Aeson</span>
<span class="kw">import </span><span class="dt">Data.Aeson.Types</span>
<span class="kw">import </span><span class="dt">Data.Aeson.TH</span>
<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy.Char8</span> <span class="kw">as</span> <span class="dt">BL</span>
<span class="kw">import qualified</span> <span class="dt">Data.Text</span> <span class="kw">as</span> <span class="dt">T</span>
<span class="kw">import </span><span class="dt">GHC.Generics</span></code></pre></div>
<p>Try not to get too overwhelmed with that giant chunk of imports and extensions. Most of it is only for the template haskell we’ll be using later. The important bit for now is <code>Data.Aeson</code> from the <code>aeson</code> package, which allows us to seamlessly work with JSON. We’ll need <code>lens</code> and <code>lens-aeson</code> packages later on.</p>
<p>Let’s pretend we have some API we’re building and want to generate a static blob of JSON for the front page. How about this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">index<span class="ot"> ::</span> <span class="dt">Value</span>
index <span class="fu">=</span> object
    [ <span class="st">&quot;message&quot;</span> <span class="fu">.=</span> <span class="dt">String</span> <span class="st">&quot;Congrats!&quot;</span>
    , <span class="st">&quot;status&quot;</span> <span class="fu">.=</span> <span class="dt">String</span> <span class="st">&quot;YOU_GOT_HERE_SO_OBVIOUSLY_SUCCESSFUL&quot;</span>
    , <span class="st">&quot;metadata&quot;</span> <span class="fu">.=</span> object [
        <span class="st">&quot;version&quot;</span> <span class="fu">.=</span> <span class="dt">Number</span> <span class="dv">9</span>
      ]
    ]</code></pre></div>
<p><code>Value</code> is the type of JSON values in Haskell. We can build up an object using the <code>object</code> functions, and a mapping from keys to <code>Value</code>s, generated by <code>String</code>, <code>Number</code>, and other functions.</p>
<p>We can encode a <code>Value</code> with <code>encode</code>. It produces a lazy <code>ByteString</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">BL.putStrLn <span class="fu">$</span> encode index
<span class="co">-- { &quot;status&quot;:&quot;YOU_GOT_HERE_SO_OBVIOUSLY_SUCCESSFUL&quot;,&quot;metadata&quot;:{&quot;version&quot;:9},&quot;message&quot;:&quot;Congrats!&quot;}</span></code></pre></div>
<p>Next up, I’d like to show how a client might interact with this thing. If they have the unpacked <code>Value</code>, they can access the value at the <code>message</code> key like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">index <span class="fu">^.</span> key <span class="st">&quot;message&quot;</span> <span class="fu">.</span> _<span class="dt">String</span>
<span class="co">-- &quot;Congrats!&quot;</span></code></pre></div>
<p>What’s even better is that we don’t even need to unpack the <code>Value</code>! We can operate directly on the encoded JSON:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">encode index <span class="fu">^.</span> key <span class="st">&quot;message&quot;</span> <span class="fu">.</span> _<span class="dt">String</span>
<span class="co">-- &quot;Congrats!&quot;</span></code></pre></div>
<p>We can dig into the nested fields safely using <code>^?</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">index <span class="fu">^?</span> key <span class="st">&quot;metadata&quot;</span> <span class="fu">.</span> key <span class="st">&quot;app_version&quot;</span> <span class="fu">.</span> _<span class="dt">Number</span>
<span class="co">-- Just 9.0</span></code></pre></div>
<p>All <code>Lens</code> idioms apply. It’s easy to get, set, or modify arbitrary fields of JSON objects this way.</p>
<p>Let’s say we want to start building up our application and require more type safety. <code>aeson</code> makes it easy to generate encoding and decoding mechanisms for your data types. For instance, we can define the following two types, generate lenses (via <code>makeFields</code>) and <code>ToJSON</code> and <code>FromJSON</code> instances using a bit of template haskell:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Metadata</span> <span class="fu">=</span> <span class="dt">Metadata</span>
    { _<span class="ot">metadataAppVersion ::</span> <span class="dt">Int</span>
    } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>, <span class="dt">Generic</span>)

<span class="fu">$</span>(deriveJSON
    defaultOptions
        { fieldLabelModifier <span class="fu">=</span> camelTo2 <span class="ch">&#39;_&#39;</span> <span class="fu">.</span> drop (T.length <span class="st">&quot;_metadata&quot;</span>)
        } <span class="ch">&#39;&#39;</span><span class="dt">Metadata</span>)
<span class="fu">$</span>(makeFields <span class="ch">&#39;&#39;</span><span class="dt">Metadata</span>)

<span class="kw">data</span> <span class="dt">IndexResponse</span> <span class="fu">=</span> <span class="dt">IndexResponse</span>
    { _<span class="ot">indexResponseMessage ::</span> <span class="dt">T.Text</span>
    , _<span class="ot">indexResponseStatus ::</span> <span class="dt">T.Text</span>
    , _<span class="ot">indexResponseMetadata ::</span> <span class="dt">Metadata</span>
    } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>, <span class="dt">Generic</span>)

<span class="fu">$</span>(deriveJSON
    defaultOptions
        { fieldLabelModifier <span class="fu">=</span> camelTo2 <span class="ch">&#39;_&#39;</span> <span class="fu">.</span> drop (T.length <span class="st">&quot;_indexResponse&quot;</span>)
        } <span class="ch">&#39;&#39;</span><span class="dt">IndexResponse</span>)
<span class="fu">$</span>(makeFields <span class="ch">&#39;&#39;</span><span class="dt">IndexResponse</span>)</code></pre></div>
<p>Here’s the same <code>index</code> structure, now typed more explicitly:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">indexResponse ::</span> <span class="dt">IndexResponse</span>
indexResponse <span class="fu">=</span> <span class="dt">IndexResponse</span>
    <span class="st">&quot;Congrats!&quot;</span>
    <span class="st">&quot;YOU_GOT_HERE_SO_OBVIOUSLY_SUCCESSFUL&quot;</span>
    (<span class="dt">Metadata</span> <span class="dv">9</span>)</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">BL.putStrLn <span class="fu">$</span> encode indexResponse
<span class="co">-- {&quot;message&quot;:&quot;Congrats!&quot;,&quot;status&quot;:&quot;YOU_GOT_HERE_SO_OBVIOUSLY_SUCCESSFUL&quot;,&quot;metadata&quot;:{&quot;app_version&quot;:9}}</span></code></pre></div>
<p>Note that the <code>appVersion</code> field gets automatically converted from <code>camelCase</code> to <code>snake_case</code> with the <code>camelTo2</code> option from <code>Data.Aeson.Types</code>. Handy!</p>
<p>We can check that encoding and decoding works, and use more type-safe lenses (in this case, <code>message</code>, which was generated by <code>makeFields</code>):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(decode (encode indexResponse)<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">IndexResponse</span>) <span class="fu">^.</span> _<span class="dt">Just</span> <span class="fu">.</span> message
<span class="co">-- &quot;Congrats!&quot;</span></code></pre></div>
<p>As you can see, dealing with JSON in Haskell is a breeze! What other tips and tricks do you use when dealing with JSON (de)serialization (in Haskell or otherwise)?</p>
<p>Until next time,</p>
<p>Ben</p>
<p>You can read more about <code>aeson</code> and <code>lens-aeson</code> in the docs:</p>
<ul>
<li><a href="https://www.stackage.org/lts-8.13/package/aeson-1.0.2.1">aeson</a></li>
<li><a href="https://www.stackage.org/lts-8.13/package/lens-aeson-1.0.1">lens-aeson</a></li>
</ul>
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell Bits #4 - Environment Variables</title>
    <link href="http://kovach.me/posts/2017-02-22-environment-variables.html" />
    <id>http://kovach.me/posts/2017-02-22-environment-variables.html</id>
    <published>2017-02-22T00:00:00Z</published>
    <updated>2017-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<p>It’s likely that you’ll have to deal with environment variables at some point. What I’ll describe here is a kicking-off point for robust environment handling with little overhead. We’ll build a tiny library you can drop into any application that will make dealing with environment variables for configuration a lot easier. Then I’ll show some example usage.</p>
<p>This is all built on top of <code>System.Environment</code>, which isn’t super nice to use in its raw form. In particular, there no implicit facilities for type coercion, fallback values, or composability. We’ll address those problems here.</p>
<p>You’ll need the following libraries to get run the code in this post: <code>transformers</code>, <code>split</code> and <code>safe</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span>

<span class="kw">import </span><span class="dt">System.Environment</span> <span class="kw">hiding</span> (getEnv)
<span class="kw">import </span><span class="dt">Control.Monad.Trans.Maybe</span>
<span class="kw">import </span><span class="dt">Control.Monad.IO.Class</span>
<span class="kw">import </span><span class="dt">Control.Applicative</span>
<span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">Safe</span>
<span class="kw">import </span><span class="dt">Data.List.Split</span>

<span class="kw">newtype</span> <span class="dt">Env</span> a <span class="fu">=</span> <span class="dt">Env</span>{<span class="ot"> unEnv ::</span> <span class="dt">MaybeT</span> <span class="dt">IO</span> a }
    <span class="kw">deriving</span>
        ( <span class="dt">Functor</span>
        , <span class="dt">Applicative</span>
        , <span class="dt">Monad</span>
        , <span class="dt">MonadIO</span>
        , <span class="dt">Alternative</span>
        , <span class="dt">MonadPlus</span>
        )

<span class="ot">runEnv ::</span> <span class="dt">Env</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> a)
runEnv <span class="fu">=</span> runMaybeT <span class="fu">.</span> unEnv

<span class="co">-- Lift a `Maybe` into the `Env` context.</span>
<span class="ot">liftMaybe ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Env</span> a
liftMaybe <span class="fu">=</span> <span class="dt">Env</span> <span class="fu">.</span> <span class="dt">MaybeT</span> <span class="fu">.</span> pure

<span class="co">-- Get an environment variable in its</span>
<span class="co">-- raw form.</span>
<span class="ot">getEnv ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Env</span> <span class="dt">String</span>
getEnv key <span class="fu">=</span>
    liftIO (lookupEnv key) <span class="fu">&gt;&gt;=</span> liftMaybe

<span class="co">-- Pull an environment variable from</span>
<span class="co">-- the environment, using a parsing</span>
<span class="co">-- function for conversion.</span>
<span class="ot">env ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a) <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Env</span> a
env f key <span class="fu">=</span> liftMaybe <span class="fu">.</span> f <span class="fu">=&lt;&lt;</span> getEnv key

<span class="co">-- Pull an optional value from the</span>
<span class="co">-- environment.</span>
optional
<span class="ot">    ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a)
    <span class="ot">-&gt;</span> <span class="dt">String</span>
    <span class="ot">-&gt;</span> <span class="dt">Env</span> (<span class="dt">Maybe</span> a)
optional f key <span class="fu">=</span>
    (f <span class="fu">&lt;$&gt;</span> getEnv key) <span class="fu">&lt;|&gt;</span> pure <span class="dt">Nothing</span> 

<span class="co">-- Exploit the `Read` interface for a type</span>
<span class="co">-- to read an environment variable.</span>
<span class="ot">readEnv ::</span> <span class="dt">Read</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Env</span> a
readEnv <span class="fu">=</span> env readMay</code></pre></div>
<p>This code was adapted from <a href="https://www.reddit.com/r/haskell/comments/3bckm7/envy_an_environmentally_friendly_way_to_deal_with/csl3nqa/">a comment on reddit</a> (credit to u/Tekmo).</p>
<p>I think this mini-library is “good enough” for a lot of applications. One major drawback is that it doesn’t report missing or improperly formatted environment variables - functionality can be added in a relatively straightforward way, however, with a <code>MonadThrow</code> constraint. This is the simplest thing that does the job well, though, so we’ll run with it.</p>
<p>For my example application, I want to be able to pull configuration information from a set of environment variables.</p>
<p>We can use our mini-library to do this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Stage</span> 
  <span class="fu">=</span> <span class="dt">Testing</span>
  <span class="fu">|</span> <span class="dt">Development</span>
  <span class="fu">|</span> <span class="dt">Staging</span> 
  <span class="fu">|</span> <span class="dt">Production</span>
    <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)

<span class="kw">data</span> <span class="dt">Version</span> <span class="fu">=</span> <span class="dt">Version</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="dt">Int</span>
    <span class="kw">deriving</span> <span class="dt">Show</span>

<span class="kw">data</span> <span class="dt">MyEnvironment</span> <span class="fu">=</span> <span class="dt">MyEnvironment</span>
    {<span class="ot"> stage ::</span> <span class="dt">Stage</span>
    ,<span class="ot"> identifier ::</span> <span class="dt">Maybe</span> <span class="dt">String</span>
    ,<span class="ot"> version ::</span> <span class="dt">Version</span>
    } <span class="kw">deriving</span> (<span class="dt">Show</span>)

<span class="co">-- Parse a semantic version string like v1.3.3</span>
<span class="ot">parseVersion ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Version</span>
parseVersion versionString <span class="fu">=</span>
    <span class="kw">case</span> splitOn <span class="st">&quot;.&quot;</span> semver <span class="kw">of</span>
         [major, minor, patch] <span class="ot">-&gt;</span>
             <span class="dt">Version</span>
                <span class="fu">&lt;$&gt;</span> readMay major
                <span class="fu">&lt;*&gt;</span> readMay minor
                <span class="fu">&lt;*&gt;</span> readMay patch
         _ <span class="ot">-&gt;</span> <span class="dt">Nothing</span>
    <span class="kw">where</span> semver <span class="fu">=</span> tail versionString

<span class="co">-- An environment reader for `MyEnvironment`</span>
<span class="ot">myEnv ::</span> <span class="dt">Env</span> <span class="dt">MyEnvironment</span>
myEnv <span class="fu">=</span> <span class="dt">MyEnvironment</span>
    <span class="fu">&lt;$&gt;</span> (readEnv <span class="st">&quot;APP_STAGE&quot;</span> <span class="fu">&lt;|&gt;</span> pure <span class="dt">Production</span>)
    <span class="fu">&lt;*&gt;</span> optional <span class="dt">Just</span> <span class="st">&quot;APP_ID&quot;</span>
    <span class="fu">&lt;*&gt;</span> env parseVersion <span class="st">&quot;APP_VERSION&quot;</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> runEnv myEnv <span class="fu">&gt;&gt;=</span> print</code></pre></div>
<p>Running this as an executable <code>my_app</code>, we get the following output (formatting mine):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> <span class="dt">APP_STAGE</span><span class="fu">=</span><span class="dt">Testing</span> <span class="dt">APP_VERSION</span><span class="fu">=</span>v1<span class="fu">.</span><span class="fl">1.1</span> <span class="dt">APP_ID</span><span class="fu">=</span>its_me_mario my_app

<span class="dt">Just</span> (
  <span class="dt">MyEnvironment</span>
    { stage <span class="fu">=</span> <span class="dt">Testing</span>
    , identifier <span class="fu">=</span> <span class="dt">Just</span> <span class="st">&quot;its_me_mario&quot;</span>
    , version <span class="fu">=</span> <span class="dt">Version</span> <span class="dv">1</span> <span class="dv">1</span> <span class="dv">1</span>
    }
  )</code></pre></div>
<p>Or, with some missing/incomplete information:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> <span class="dt">APP_STAGE</span><span class="fu">=</span>nonexistent <span class="dt">APP_VERSION</span><span class="fu">=</span>v1<span class="fu">.</span><span class="fl">1.4</span> my_app

<span class="dt">Just</span> (
  <span class="dt">MyEnvironment</span>
    { stage <span class="fu">=</span> <span class="dt">Production</span>
    , identifier <span class="fu">=</span> <span class="dt">Nothing</span>
    , version <span class="fu">=</span> <span class="dt">Version</span> <span class="dv">1</span> <span class="dv">1</span> <span class="dv">4</span>
    }
  )</code></pre></div>
<p>What do you use for handling environment variables in Haskell? Do you use environment variables for different purposes that you’d like to see covered? What else would you like to see covered in future Haskell Bits? Let me know in the comments!</p>
<p>Ben</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell Bits #3: Connecting to Databases</title>
    <link href="http://kovach.me/posts/2017-02-08-connecting-to-databases.html" />
    <id>http://kovach.me/posts/2017-02-08-connecting-to-databases.html</id>
    <published>2017-02-08T00:00:00Z</published>
    <updated>2017-02-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<p>Today I want to talk about getting Haskell programs to talk to databases.</p>
<p>We’ll set out to build something pretty simple: A single table, filled with records of board games. I want to keep the focus of the post on connecting to various database types, so our board game record will be extremely simple. Here’s an example of the table we’ll be working with:</p>
<table class="checkered full-width">
<thead class="left">
<tr>
<th>
id
</th>
<th>
name
</th>
<th>
designer
</th>
<th>
year
</th>
</tr>
<thead>
<tbody>
<tr>
<td>
1
</td>
<td>
Lords of Waterdeep
</td>
<td>
Peter Lee
</td>
<td>
2012
</td>
</tr>
<tr>
<td>
3
</td>
<td>
Agricola
</td>
<td>
Uwe Rosenberg
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
4
</td>
<td>
Race for the Galaxy
</td>
<td>
Thomas Lehmann
</td>
<td>
2007
</td>
</tr>
</tbody>
</table>
<p>Important note: I originally had “Chess” in here as a board game with no known year, but realized after writing the post and all of the associated code that I don’t know who designed it, either! The <code>designer</code> should technically be nullable as well, but it is not in the schema I’ve defined. Keep that in mind as you read through the post!</p>
<p>I’m going to walk through inserting a single element into a table of the aforementioned schema, but it will support all of the records above. Try inserting them as an exercise!</p>
<p>We’re going to talk about connecting to three different databases:</p>
<ul>
<li>sqlite</li>
<li>postgresql</li>
<li>mysql</li>
</ul>
<p>…with two different “flavors” of libary. First, the lower-level “-simple” strain of database libraries, and later, the higher-level <code>persistent</code> library.</p>
<h3 id="connecting-to-sqlite-with-sqlite-simple">Connecting to <code>sqlite</code> with <code>sqlite-simple</code></h3>
<p>We need a database:</p>
<div class="sourceCode"><pre class="sourceCode sql"><code class="sourceCode sql">$ sqlite3 board_games.db <span class="ot">&quot;CREATE TABLE IF NOT EXISTS board_games (id INTEGER PRIMARY KEY,</span>
name TEXT <span class="kw">NOT</span> <span class="kw">NULL</span>, designer TEXT <span class="kw">NOT</span> <span class="kw">NULL</span>, <span class="dt">year</span> <span class="dt">INTEGER</span>);<span class="ot">&quot;</span></code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE RecordWildCards #-}</span>
<span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>

<span class="kw">import </span><span class="dt">Control.Monad.State</span>
<span class="kw">import </span><span class="dt">Control.Monad.Reader</span>
<span class="kw">import </span><span class="dt">Data.Text</span>
<span class="kw">import </span><span class="dt">Database.SQLite.Simple</span>
<span class="kw">import </span><span class="dt">Data.Maybe</span> (fromJust)

<span class="kw">data</span> <span class="dt">BoardGame</span> <span class="fu">=</span> <span class="dt">BoardGame</span>
    {<span class="ot"> name ::</span> <span class="dt">Text</span>
    ,<span class="ot"> designer ::</span> <span class="dt">Text</span>
    ,<span class="ot"> year ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span>
    } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)

<span class="kw">instance</span> <span class="dt">FromRow</span> <span class="dt">BoardGame</span> <span class="kw">where</span>
    fromRow <span class="fu">=</span> <span class="dt">BoardGame</span> <span class="fu">&lt;$&gt;</span> field <span class="fu">&lt;*&gt;</span> field <span class="fu">&lt;*&gt;</span> field

<span class="kw">instance</span> <span class="dt">ToRow</span> <span class="dt">BoardGame</span> <span class="kw">where</span>
    toRow <span class="dt">BoardGame</span>{<span class="fu">..</span>} <span class="fu">=</span> toRow (name, designer, year)

<span class="ot">createGame ::</span> <span class="dt">BoardGame</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Connection</span> <span class="dt">IO</span> (<span class="dt">Int</span>, <span class="dt">BoardGame</span>)
createGame game <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
    liftIO <span class="fu">$</span> execute
        conn 
        <span class="st">&quot;INSERT INTO board_games (name, designer, year) VALUES (?,?,?)&quot;</span>
        game
    boardGameId <span class="ot">&lt;-</span> fromIntegral <span class="fu">&lt;$&gt;</span> liftIO (lastInsertRowId conn)
    game&#39; <span class="ot">&lt;-</span> fromJust <span class="fu">&lt;$&gt;</span> readGame boardGameId
    pure (boardGameId, game&#39;)

<span class="ot">readGame ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Connection</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">BoardGame</span>)
readGame boardGameId <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
    games <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> query 
        conn
        <span class="st">&quot;SELECT name, designer, year FROM board_games WHERE id = ?&quot;</span>
        (<span class="dt">Only</span> boardGameId)
    pure <span class="fu">$</span> <span class="kw">case</span> games <span class="kw">of</span>
         [g] <span class="ot">-&gt;</span> <span class="dt">Just</span> g
         _ <span class="ot">-&gt;</span> <span class="dt">Nothing</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
    conn <span class="ot">&lt;-</span> open <span class="st">&quot;board_games.db&quot;</span>
    flip runReaderT conn <span class="fu">$</span> <span class="kw">do</span>
        result <span class="ot">&lt;-</span> createGame <span class="fu">$</span> <span class="dt">BoardGame</span>
            <span class="st">&quot;Cosmic Encounter&quot;</span>
            <span class="st">&quot;Bill Eberle&quot;</span>
            (<span class="dt">Just</span> <span class="dv">2008</span>)
        liftIO <span class="fu">$</span> print result</code></pre></div>
<p>(packages needed: <code>sqlite-simple</code>, <code>mtl</code>, <code>text</code>)</p>
<p>This is the core logic we’ll be implementing with each library. We’ll just be modifying this piecemeal for the rest of the implementations. It’s the longest code sample in the post, so don’t run off!</p>
<p>Let’s walk through this a little, just once. Here’s what we’re doing:</p>
<ul>
<li>Creating a connection (called <code>conn</code>)</li>
<li>Storing it in a read-only environment with <code>ReaderT</code> computations</li>
<li>Creating a new record for Cosmic Encounter</li>
<li>Then printing it, along with its id in the database.</li>
</ul>
<p>In order to do this, we have to write a little bit of boilerplate. First is the model definition for <code>BoardGame</code>, and instances of <code>ToRow</code> and <code>FromRow</code>, which allow us to serialize and deserialize from the <code>sqlite</code> representation of a <code>BoardGame</code>. We also have to write the actual SQL commands; not a whole lot is abstracted away from us.</p>
<p>(I lied a little - the model definition is not strictly necessary but it’s typically good to pull data into your program’s domain, so I suggest doing this step.)</p>
<h3 id="connecting-to-postgresql-with-postgresql-simple">Connecting to <code>postgresql</code> with <code>postgresql-simple</code></h3>
<p>We’ll need a database, again (note the syntax is slightly different):</p>
<div class="sourceCode"><pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">TABLE</span> <span class="kw">IF</span> <span class="kw">NOT</span> <span class="kw">EXISTS</span> board_games (
  <span class="kw">id</span> SERIAL <span class="kw">PRIMARY</span> <span class="kw">KEY</span>,
  name TEXT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  designer TEXT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  <span class="dt">year</span> <span class="dt">INTEGER</span>
);</code></pre></div>
<p>Otherwise, we don’t have a ton to change. We only have to touch a few things:</p>
<ul>
<li>The way that we procure a <code>Connection</code> is slightly different, because we’re no longer using a flat file</li>
<li><code>lastInsertRowId</code> is not a primitive. Postgres supports <code>RETURNING</code> syntax so we can get the <code>id</code> when we insert.</li>
<li>The imports have to change.</li>
</ul>
<p>That’s actually…it. Here are the imports we need:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Database.PostgreSQL.Simple</span>
<span class="kw">import </span><span class="dt">Database.PostgreSQL.Simple.FromRow</span>
<span class="kw">import </span><span class="dt">Database.PostgreSQL.Simple.ToRow</span></code></pre></div>
<p>Here is the new <code>createGame</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">createGame ::</span> <span class="dt">BoardGame</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Connection</span> <span class="dt">IO</span> (<span class="dt">Int</span>, <span class="dt">BoardGame</span>)
createGame game <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
    [<span class="dt">Only</span> boardGameId] <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> query
        conn 
        <span class="st">&quot;INSERT INTO board_games (name, designer, year) VALUES (?,?,?) RETURNING id&quot;</span>
        game
    game&#39; <span class="ot">&lt;-</span> fromJust <span class="fu">&lt;$&gt;</span> readGame boardGameId
    pure (boardGameId, game&#39;)</code></pre></div>
<p>And here is the new connection procuring mechanism (this uses a <a href="https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNSTRING">postgres connection string</a>, so suit it to your needs):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Inside `main`:</span>
conn <span class="ot">&lt;-</span> connectPostgreSQL <span class="st">&quot;host=localhost port=5432 connect_timeout=10&quot;</span></code></pre></div>
<p>(packages needed: <code>postgresql-simple</code>, <code>mtl</code>, <code>text</code>)</p>
<p><a href="https://gist.github.com/5outh/31acec58bbd91413d71a0df2638fe899">Check out the full source here</a>.</p>
<h3 id="connecting-to-mysql-with-mysql-simple">Connecting to <code>mysql</code> with <code>mysql-simple</code></h3>
<p>The last database we’ll get this running on is <code>mysql</code>. <code>mysql-simple</code> was the original “-simple” library for database management. However, it’s also the most different.</p>
<p>First, creating the table:</p>
<div class="sourceCode"><pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">TABLE</span> `board_games` (
  `id` <span class="dt">int</span>(<span class="dv">11</span>) unsigned <span class="kw">NOT</span> <span class="kw">NULL</span> AUTO_INCREMENT,
  `name` <span class="dt">varchar</span>(<span class="dv">64</span>) <span class="kw">NOT</span> <span class="kw">NULL</span> <span class="kw">DEFAULT</span> <span class="st">&#39;&#39;</span>,
  `designer` <span class="dt">varchar</span>(<span class="dv">64</span>) <span class="kw">NOT</span> <span class="kw">NULL</span> <span class="kw">DEFAULT</span> <span class="st">&#39;&#39;</span>,
  `year` <span class="dt">int</span>(<span class="dv">4</span>) <span class="kw">DEFAULT</span> <span class="kw">NULL</span>,
  <span class="kw">PRIMARY</span> <span class="kw">KEY</span> (`id`)
) ENGINE=InnoDB <span class="kw">DEFAULT</span> CHARSET=utf8;</code></pre></div>
<p>We’ll need the language extension <code>BangPatterns</code> (not necessary, but recommended):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE BangPatterns #-}</span></code></pre></div>
<p>and some updated imports:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Database.MySQL.Simple</span>
<span class="kw">import </span><span class="dt">Database.MySQL.Simple.QueryParams</span>
<span class="kw">import </span><span class="dt">Database.MySQL.Simple.QueryResults</span>
<span class="kw">import </span><span class="dt">Database.MySQL.Simple.Param</span>
<span class="kw">import </span><span class="dt">Database.MySQL.Simple.Result</span></code></pre></div>
<p>Our <code>BoardGame</code> type can stay the same, but <code>ToRow</code> and <code>FromRow</code> get replaced with the typeclasses <code>QueryParams</code> and <code>QueryResults</code> respectively. Their interfaces are a little different too:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">QueryParams</span> <span class="dt">BoardGame</span> <span class="kw">where</span>
    renderParams <span class="dt">BoardGame</span>{<span class="fu">..</span>} <span class="fu">=</span> [render name, render designer, render year]

<span class="kw">instance</span> <span class="dt">QueryResults</span> <span class="dt">BoardGame</span> <span class="kw">where</span>
    convertResults [fa,fb,fc] [va,vb,vc] <span class="fu">=</span> <span class="dt">BoardGame</span> a b c 
        <span class="kw">where</span> <span class="fu">!</span>a <span class="fu">=</span> convert fa va
              <span class="fu">!</span>b <span class="fu">=</span> convert fb vb
              <span class="fu">!</span>c <span class="fu">=</span> convert fc vc
    convertResults fs vs  <span class="fu">=</span> convertError fs vs <span class="dv">3</span></code></pre></div>
<p>We need to go back to selecting the last insert id, but there’s no primitive for that, so we inline it and make some small modifications to <code>createGame</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">createGame ::</span> <span class="dt">BoardGame</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Connection</span> <span class="dt">IO</span> (<span class="dt">Int</span>, <span class="dt">BoardGame</span>)
createGame game <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
    liftIO <span class="fu">$</span> execute
        conn 
        <span class="st">&quot;INSERT INTO board_games (name, designer, year) VALUES (?,?,?)&quot;</span>
        game
    [<span class="dt">Only</span> boardGameId] <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> query_ conn <span class="st">&quot;SELECT LAST_INSERT_ID()&quot;</span>
    game&#39; <span class="ot">&lt;-</span> fromJust <span class="fu">&lt;$&gt;</span> readGame boardGameId 
    pure (boardGameId, game&#39;)</code></pre></div>
<p>Connection info is provided using <code>ConnectInfo</code> instead of a postgres connection string:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">connectInfo ::</span> <span class="dt">ConnectInfo</span>
connectInfo <span class="fu">=</span> defaultConnectInfo
    { connectDatabase <span class="fu">=</span> <span class="st">&quot;board_games&quot;</span>
    }</code></pre></div>
<p>The last step is to swap the connection line in <code>main</code> to:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Inside main</span>
conn <span class="ot">&lt;-</span> connect connectInfo </code></pre></div>
<p>(packages needed: <code>postgresql-simple</code>, <code>mtl</code>, <code>text</code>)</p>
<p><a href="https://gist.github.com/5outh/5b53643979fb510ded470f8c0bb449e3">Check out the full source here</a></p>
<p>These libraries are not all that different - they’re all inspired by one-another. You may find documentation or tutorials that use one of these libraries and need to use another; I hope this helps translate between the languages of the three.</p>
<p>Next, I’d like to talk about <code>persistent</code>. <code>persistent</code> is a higher-level, more fully featured set of database tooling. It’s a lot more “magical” than the “-simple” libraries, but removes the necessity of some of the boilerplate and inlining of raw SQL that comes with the “-simple” variants. It’s also backend-agnostic which makes for a uniform interface.</p>
<h3 id="connecting-to-sqlite-with-persistent">Connecting to <code>sqlite</code> with <code>persistent</code></h3>
<p>We’ll need a data type definition in <code>persistent</code>’s template haskell DSL, which we’ll put in a module called <code>Types</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span>
<span class="ot">{-# LANGUAGE QuasiQuotes #-}</span>
<span class="ot">{-# LANGUAGE TypeFamilies #-}</span>
<span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span>
<span class="ot">{-# LANGUAGE GADTs #-}</span>
<span class="ot">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span>

<span class="kw">module</span> <span class="dt">Types</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Database.Persist.TH</span>

share [mkPersist sqlSettings, mkMigrate <span class="st">&quot;migrateAll&quot;</span>] [persistLowerCase<span class="fu">|</span>
<span class="dt">BoardGame</span> sql<span class="fu">=</span>board_games
    name <span class="dt">String</span>
    designer <span class="dt">String</span>
    year <span class="dt">Int</span> <span class="dt">Maybe</span>

    <span class="dt">UniqueName</span> name

    <span class="kw">deriving</span> <span class="dt">Show</span>
<span class="fu">|</span>]</code></pre></div>
<p>The translated source:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>

<span class="kw">import </span><span class="dt">Types</span>

<span class="kw">import </span><span class="dt">Database.Persist.Sqlite</span>
<span class="kw">import </span><span class="dt">Control.Monad.Logger</span>
<span class="kw">import </span><span class="dt">Control.Monad.IO.Class</span>

<span class="ot">printIO ::</span> (<span class="dt">MonadIO</span> m, <span class="dt">Show</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> m ()
printIO <span class="fu">=</span> liftIO <span class="fu">.</span> print

<span class="ot">createGame ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">BoardGame</span> <span class="ot">-&gt;</span> <span class="dt">SqlPersistT</span> m (<span class="dt">Entity</span> <span class="dt">BoardGame</span>) 
createGame <span class="fu">=</span> insertEntity

<span class="ot">readGame ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">SqlPersistT</span> m (<span class="dt">Maybe</span> <span class="dt">BoardGame</span>) 
readGame <span class="fu">=</span> get <span class="fu">.</span> toSqlKey <span class="fu">.</span> fromIntegral

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> 
    runStdoutLoggingT
        <span class="fu">.</span> withSqlitePool <span class="st">&quot;board_games.db&quot;</span> <span class="dv">3</span>
        <span class="fu">.</span> runSqlPool
        <span class="fu">$</span> <span class="kw">do</span>
            result <span class="ot">&lt;-</span> createGame <span class="fu">$</span> <span class="dt">BoardGame</span>
                <span class="st">&quot;Cosmic Encounter&quot;</span>
                <span class="st">&quot;Bill Eberle&quot;</span>
                (<span class="dt">Just</span> <span class="dv">2008</span>)
            liftIO <span class="fu">$</span> print result

            <span class="co">-- This is the easiest way to re-read a record:</span>
            get (entityKey result) <span class="fu">&gt;&gt;=</span> printIO 

            <span class="co">-- Getting by id</span>
            readGame <span class="dv">1</span> <span class="fu">&gt;&gt;=</span> printIO 
            
            <span class="co">-- Get by name too:</span>
            getBy (<span class="dt">UniqueName</span> <span class="st">&quot;Cosmic Encounter&quot;</span>) <span class="fu">&gt;&gt;=</span> printIO </code></pre></div>
<p>(packages needed: <code>persistent</code>, <code>persistent-template</code>, <code>persistent-sqlite</code>, <code>mtl</code>, <code>monad-logger</code>)</p>
<p>A couple of things:</p>
<ul>
<li><code>SqlPersistT</code> can be thought of as a “SQL Statement Context” - you can write arbitrary queries in these blocks. <em>Each of these is run in its own transaction by default, so be careful! Any exceptions will roll back any changes.</em> (thanks to /u/ephrion for bringing up this point!)</li>
<li><code>BoardGame</code> and <code>UniqueName</code> are types generated by the template haskell in the <code>Types</code> module.</li>
<li>This uses a connection pool with 3 open connections. You can also create a single connection with <code>withSqliteConn</code> instead of <code>withSqlitePool</code>.</li>
<li><code>Entity</code> is a type consisting of a <code>Key</code> and a model (in our case, <code>BoardGame</code>) - this is analogous to <code>(Int, BoardGame)</code> with the <code>-simple</code> libraries.</li>
<li><code>runStdoutLoggingT</code> prints debug SQL statements to stdout. It can be replaced with <code>runNoLoggingT</code> or <code>runStderrLoggingT</code> to modify this behavior.</li>
</ul>
<p>This is just the tip of the iceberg. See <a href="http://www.yesodweb.com/book/persistent">the Yesod book’s chapter on persistent</a>, the <a href="https://www.stackage.org/lts-8.0/package/persistent-2.6">persistent documentation</a> and specifically the <a href="https://www.stackage.org/haddock/lts-8.0/persistent-2.6/Database-Persist-Class.html">Database.Persist.Class module</a> for more information.</p>
<p>Also see the <a href="https://www.stackage.org/package/persistent-sqlite">persistent-sqlite documentation</a>.</p>
<h3 id="connecting-to-postgres-with-persistent">Connecting to <code>postgres</code> with <code>persistent</code></h3>
<p>Change the <code>Database.Persist.Sqlite</code> import to <code>Database.Persist.Postgres</code>.</p>
<p>The only other thing to change in order to connect to <code>postgres</code> instead is the second line of <code>main</code>, to:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.</span> withPostgresqlPool <span class="st">&quot;host=localhost port=5432 connect_timeout=10&quot;</span> <span class="dv">3</span></code></pre></div>
<p>(packages needed: <code>persistent</code>, <code>persistent-template</code>, <code>persistent-postgresql</code>, <code>mtl</code>, <code>monad-logger</code>)</p>
<p>Everything else works the same!</p>
<p><a href="https://gist.github.com/5outh/d2f6a8762701928ceb967d25710c7ed1">View the full source here</a></p>
<p>And the <a href="https://www.stackage.org/lts-8.0/package/persistent-postgresql-2.6">persistent-postgresql documentation</a></p>
<h3 id="connecting-to-mysql-with-persistent">Connecting to <code>mysql</code> with <code>persistent</code></h3>
<p>Connecting to mysql is almost as simple. Change the import to <code>Database.Persist.MySQL</code>, add the <code>ConnectInfo</code> definition:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">connectInfo ::</span> <span class="dt">ConnectInfo</span>
connectInfo <span class="fu">=</span> defaultConnectInfo
    { connectDatabase <span class="fu">=</span> <span class="st">&quot;board_games&quot;</span>
    }</code></pre></div>
<p>and change the same line in <code>main</code> to:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.</span> withMySQLPool connectInfo <span class="dv">3</span></code></pre></div>
<p>(packages needed: <code>persistent</code>, <code>persistent-template</code>, <code>persistent-mysql</code>, <code>mtl</code>, <code>monad-logger</code>)</p>
<p>Again, everything else works the same.</p>
<p><a href="https://gist.github.com/5outh/b9d80d7fc174ae5aa87818dfd5158362">View the full source here</a></p>
<p>And the <a href="https://www.stackage.org/lts-8.0/package/persistent-mysql-2.6">persistent-mysql documentation</a></p>
<p>I’ve never attempted to run a database-backed haskell application on Windows, so I must apologize for not showing off how to connect to SQL Server. AFAIK, the only current package that supports this is <a href="https://github.com/hdbc/hdbc">HDBC</a>, which I’ve not used.</p>
<p>What is your preferred way of interacting with databases in Haskell? Which database do you think is the most pleasant to work with? What parts of this post would you like to see expanded on in the future? Let me know in the comments!</p>
<p>Ben</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell Bits #2: Application Beginnings</title>
    <link href="http://kovach.me/posts/2017-02-03-haskell-bits-application-beginnings.html" />
    <id>http://kovach.me/posts/2017-02-03-haskell-bits-application-beginnings.html</id>
    <published>2017-02-03T00:00:00Z</published>
    <updated>2017-02-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<p>Are you comfortable creating data types, manipulating lists, composing functions, etc, but not sure how to make a “useful program” with haskell? This is a very common stumbling block when learning. It might be the complaint I’ve heard the most.</p>
<p>In this <em>Haskell Bit</em>, I want to walk through a pattern I have commonly seen in haskell applications. The pattern isn’t specific to haskell - it’s commonplace in tons of programming environments. It’s just a little less obvious how to get here with Haskell.</p>
<p>Here’s the pattern:</p>
<ul>
<li>Read some configuration (we’ll read it from the environment)</li>
<li>Set up some program state that will be manipulated over the course of the program</li>
<li>Run the program!</li>
</ul>
<p>The <a href="https://hackage.haskell.org/package/mtl"><code>mtl</code></a> package will need to be installed to run these examples.</p>
<p>In haskell, we have to be explicit about our the shape of our state and environment. A common way to represent a program with access to these basic needs, and not much else, is with the following data type:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad.Reader</span>
<span class="kw">import </span><span class="dt">Control.Monad.State</span>

<span class="kw">type</span> <span class="dt">Program</span> state config a <span class="fu">=</span> <span class="dt">StateT</span> state (<span class="dt">ReaderT</span> config <span class="dt">IO</span>) a</code></pre></div>
<p>This data type expresses the following:</p>
<ul>
<li>We can read and manipulate the internal state of our program (of type <code>state</code>)</li>
<li>We can read (and only read) values of type <code>config</code> in our program</li>
<li>We can access IO</li>
</ul>
<p>For those who aren’t familiar, this is called a “monad transformer stack”. It’s just an expression of the effects our program can have.</p>
<p>With this, we’re going to build something extremely contrived. It should demonstrate the utility of this pattern, however. Here’s what we’ll do:</p>
<ul>
<li>Read two environment variables, <code>COUNT_BY</code>, and <code>COUNT_UP_TO</code></li>
<li>It will start at <code>0</code>, and count by <code>COUNT_BY</code> steps, up to <code>COUNT_UP_TO</code>, printing out each value.</li>
</ul>
<p>To do this, we need IO (to print), a read-only environment (to store the environment variables in), and some state (the current count). Sounds like it fits the pattern. Let’s see what it looks like!</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad.State</span>
<span class="kw">import </span><span class="dt">Control.Monad.Reader</span>
<span class="kw">import </span><span class="dt">Control.Monad.IO.Class</span>
<span class="kw">import </span><span class="dt">Data.Monoid</span>
<span class="kw">import </span><span class="dt">System.Environment</span>

<span class="kw">type</span> <span class="dt">Program</span> state config a <span class="fu">=</span> <span class="dt">StateT</span> state (<span class="dt">ReaderT</span> config <span class="dt">IO</span>) a

<span class="co">-- Run a `Program` with a given state and config, returning</span>
<span class="co">-- a final value and the final state of the `Program`</span>
<span class="ot">runProgram ::</span> <span class="dt">Program</span> s c a <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> c <span class="ot">-&gt;</span> <span class="dt">IO</span> (a, s)
runProgram p s c <span class="fu">=</span> runReaderT (runStateT p s) c

<span class="kw">data</span> <span class="dt">CounterState</span> <span class="fu">=</span> <span class="dt">CounterState</span> {<span class="ot"> currentCount ::</span> <span class="dt">Integer</span> }

<span class="kw">data</span> <span class="dt">CounterConfig</span> <span class="fu">=</span> <span class="dt">CounterConfig</span>
    {<span class="ot"> countBy ::</span> <span class="dt">Integer</span>
    ,<span class="ot"> countUpTo ::</span> <span class="dt">Integer</span>
    }

<span class="co">-- A more specific type for our Counter program</span>
<span class="kw">type</span> <span class="dt">Counter</span> a <span class="fu">=</span> <span class="dt">Program</span> <span class="dt">CounterState</span> <span class="dt">CounterConfig</span> a

<span class="co">-- The initial state we&#39;re starting with</span>
<span class="ot">initialState ::</span> <span class="dt">CounterState</span>
initialState <span class="fu">=</span> <span class="dt">CounterState</span> <span class="dv">0</span>

<span class="co">-- Some code to read from our environment variables.</span>
<span class="co">-- Note: This is unsafe, and if either environment variable is</span>
<span class="co">-- a) not set, or</span>
<span class="co">-- b) not formatted like an integer,</span>
<span class="co">-- the program will currently error out.</span>
<span class="ot">getConfig ::</span> <span class="dt">IO</span> <span class="dt">CounterConfig</span>
getConfig <span class="fu">=</span> <span class="kw">do</span>
    countBy&#39; <span class="ot">&lt;-</span> read <span class="fu">&lt;$&gt;</span> getEnv <span class="st">&quot;COUNT_BY&quot;</span>  
    countUpTo&#39; <span class="ot">&lt;-</span> read <span class="fu">&lt;$&gt;</span> getEnv <span class="st">&quot;COUNT_UP_TO&quot;</span>
    pure <span class="fu">$</span> <span class="dt">CounterConfig</span> countBy&#39; countUpTo&#39; 

<span class="co">-- Our actual program (&quot;business logic&quot;)</span>
<span class="ot">counter ::</span> <span class="dt">Counter</span> () 
counter <span class="fu">=</span> <span class="kw">do</span>
    count <span class="ot">&lt;-</span> gets currentCount
    countUpTo&#39; <span class="ot">&lt;-</span> lift <span class="fu">$</span> asks countUpTo

    unless (count <span class="fu">&gt;</span> countUpTo&#39;) <span class="fu">$</span> <span class="kw">do</span>
        liftIO <span class="fu">.</span> putStrLn <span class="fu">$</span> <span class="st">&quot;Current count: &quot;</span> <span class="fu">&lt;&gt;</span> show count 
        countBy&#39; <span class="ot">&lt;-</span> lift <span class="fu">$</span> asks countBy
        <span class="kw">let</span> newCount <span class="fu">=</span> count <span class="fu">+</span> countBy&#39;
        modify (\st <span class="ot">-&gt;</span> st{ currentCount <span class="fu">=</span> newCount })
        counter

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
    config <span class="ot">&lt;-</span> getConfig
    void <span class="fu">$</span> runProgram counter initialState config</code></pre></div>
<p>To run this, assuming it’s compiled to a program called <code>counter</code>:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ot">COUNT_BY=</span>13 <span class="ot">COUNT_UP_TO=</span>100 <span class="kw">counter</span>
<span class="kw">Current</span> count: 0
<span class="kw">Current</span> count: 13
<span class="kw">Current</span> count: 26
<span class="kw">Current</span> count: 39
<span class="kw">Current</span> count: 52
<span class="kw">Current</span> count: 65
<span class="kw">Current</span> count: 78
<span class="kw">Current</span> count: 91</code></pre></div>
<p>Not so bad! This is totally enough to get started with some more complex programs. Anything below this point is just polish. I will go into all of these polishing modifications in more detail in later posts.</p>
<p>Anyway, the following things are a little ugly right now, in my opinion:</p>
<ul>
<li>Multiple calls to <code>lift</code> in <code>counter</code></li>
<li>The <code>modify</code> call in <code>counter</code> is not a cute line of code</li>
<li>We’re confined to <code>IO</code> as a base monad</li>
<li>As mentioned in comments, the configuration code will error out. Better to handle specific cases.</li>
</ul>
<p>The first thing I want to do is abolish the <code>lift</code> calls in <code>counter</code>.</p>
<p>We’ll need to add the <code>ConstraintKinds</code> and <code>FlexibleContexts</code> extensions to get this to compile, but here’s an updated program:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Add this to the top of the file:</span>
<span class="ot">{-# LANGUAGE ConstraintKinds#-}</span>
<span class="ot">{-# LANGUAGE FlexibleContexts#-}</span>
<span class="fu">--</span>

<span class="co">-- An interface that describes the effects our program can have.</span>
<span class="kw">type</span> <span class="dt">MonadCounter</span> m <span class="fu">=</span> 
    ( <span class="dt">MonadState</span> <span class="dt">CounterState</span> m
    , <span class="dt">MonadReader</span> <span class="dt">CounterConfig</span> m
    , <span class="dt">MonadIO</span> m
    )

<span class="ot">counter ::</span> <span class="dt">MonadCounter</span> m <span class="ot">=&gt;</span> m () 
counter <span class="fu">=</span> <span class="kw">do</span>
    count <span class="ot">&lt;-</span> gets currentCount
    countUpTo&#39; <span class="ot">&lt;-</span> asks countUpTo

    unless (count <span class="fu">&gt;</span> countUpTo&#39;) <span class="fu">$</span> <span class="kw">do</span>
        liftIO <span class="fu">.</span> putStrLn <span class="fu">$</span> <span class="st">&quot;Current count: &quot;</span> <span class="fu">&lt;&gt;</span> show count 
        countBy&#39; <span class="ot">&lt;-</span> asks countBy
        <span class="kw">let</span> newCount <span class="fu">=</span> count <span class="fu">+</span> countBy&#39;
        modify (\st <span class="ot">-&gt;</span> st{ currentCount <span class="fu">=</span> newCount })
        counter</code></pre></div>
<p>Everything else can stay the same. We’ve begun programming against the <code>MonadCounter</code> interface, which <code>Counter</code> just happens to satisfy, so we can still use our <code>runProgram</code> function. The interface contains the <code>State</code>/<code>Reader</code> functions, but removes the need for <code>lift</code>, which is nice.</p>
<blockquote>
<p>Note: If we remove the <code>MonadIO</code> constraint in <code>MonadCounter</code>, we’re no longer bound to using <code>IO</code> as our program’s base monad. It’s necessary for our current program (since <code>liftIO</code> is called), but for others it may not be.</p>
</blockquote>
<p>Next, let’s handle the ugly call to <code>modify</code>. We can clean this up with lenses. I’ll cover these in greater detail in a later post. For now, we’ll need a separate module, <code>Types</code>, containing the following (we also need the <a href="https://hackage.haskell.org/package/lens"><code>lens</code></a> library):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span>

<span class="kw">module</span> <span class="dt">Types</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Control.Lens</span>

<span class="kw">data</span> <span class="dt">CounterState</span> <span class="fu">=</span> <span class="dt">CounterState</span>
    { _<span class="ot">currentCount ::</span> <span class="dt">Integer</span>
    }

<span class="kw">data</span> <span class="dt">CounterConfig</span> <span class="fu">=</span> <span class="dt">CounterConfig</span>
    { _<span class="ot">countBy ::</span> <span class="dt">Integer</span>
    , _<span class="ot">countUpTo ::</span> <span class="dt">Integer</span>
    }

<span class="fu">$</span>(makeLenses <span class="ch">&#39;&#39;</span><span class="dt">CounterState</span>)
<span class="fu">$</span>(makeLenses <span class="ch">&#39;&#39;</span><span class="dt">CounterConfig</span>)</code></pre></div>
<p>This will give us lenses for <code>currentCount</code>, <code>countBy</code>, and <code>countUpTo</code>. We can then write <code>counter</code> as:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">counter ::</span> <span class="dt">MonadCounter</span> m <span class="ot">=&gt;</span> m () 
counter <span class="fu">=</span> <span class="kw">do</span>
    count <span class="ot">&lt;-</span> use currentCount
    countUpTo&#39; <span class="ot">&lt;-</span> view countUpTo

    unless (count <span class="fu">&gt;</span> countUpTo&#39;) <span class="fu">$</span> <span class="kw">do</span>
        liftIO <span class="fu">.</span> putStrLn <span class="fu">$</span> <span class="st">&quot;Current count: &quot;</span> <span class="fu">&lt;&gt;</span> show count 
        countBy&#39; <span class="ot">&lt;-</span> view countBy
        currentCount <span class="fu">+=</span> countBy&#39;
        counter</code></pre></div>
<p>I think that’s quite nice and readable.</p>
<p>I’m going to postpone talking about reading environment variables because I want to dedicate a whole <em>Haskell Bit</em> to reading configuration safely, and this one is getting somewhat long.</p>
<p>Is there a topic you would like to see covered in the future? Do you start your projects in a wildly different way? Let me know in the comments!</p>
<p>Ben</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Haskell Bits #1: Randomness</title>
    <link href="http://kovach.me/posts/2017-01-30-haskell-bits-randomness.html" />
    <id>http://kovach.me/posts/2017-01-30-haskell-bits-randomness.html</id>
    <published>2017-01-30T00:00:00Z</published>
    <updated>2017-01-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<p>Haskell Bits is a new series of bite-sized posts that I hope will empower people to “get it done and move on”, providing useful information and links to learn more if desired. I’ll be providing full <code>main</code> files in each example (with imports!) to make porting this stuff into your own project as frictionless as possible. This first “Haskell Bit” will cover randomness.</p>
<p>You need at least two things to produce a random number:</p>
<ul>
<li>An initial “seed” value</li>
<li>A pure function that produces a new number from that seed. (“RNG”)</li>
</ul>
<p>That’s all for a single number.</p>
<p>Most programming languages will hide these details from you unless you need them. Most of the time, you can just call <code>random()</code> and get a random number (typically between 0 and 1), using a seed value generated from some system variable that is always changing (current time in very small units is common).</p>
<p>The simplest way to replicate this behavior in Haskell is by using the <code>System.Random</code> module, part of the <a href="https://hackage.haskell.org/package/random-1.1/docs/System-Random.html"><code>random</code></a> package.</p>
<p>We can use <code>randomIO</code> and <code>randomRIO</code> to pull from a global RNG:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Random</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- A random `Double` between 0 and 1</span>
  (<span class="ot">randomIO ::</span> <span class="dt">IO</span> <span class="dt">Double</span>) <span class="fu">&gt;&gt;=</span> print

  <span class="co">-- A random `Int` between 1 and 6 (A die roll)</span>
  randomRIO (<span class="dv">1</span>, <span class="dv">6</span>) <span class="fu">&gt;&gt;=</span> print</code></pre></div>
<p>This is pretty much the interface that most other languages start with. Better would be to separate out IO as much as possible from the inevitable rest of our program. We can do that by confining IO usage to one operation: coming up with an initial RNG.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Random</span>

<span class="ot">dieRoll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> g <span class="ot">-&gt;</span> (<span class="dt">Int</span>, g)
dieRoll <span class="fu">=</span> randomR (<span class="dv">1</span>, <span class="dv">6</span>)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- New generator, generated from the system RNG </span>
  gen <span class="ot">&lt;-</span> newStdGen 

  <span class="kw">let</span> (result, newGen) <span class="fu">=</span> dieRoll gen
  print result

  <span class="kw">let</span> (newResult, newNewGen) <span class="fu">=</span> dieRoll newGen
  print newResult </code></pre></div>
<p>We don’t want to duplicate this code every time we want to add a new die roll. The next logical step would be to sprinkle in some <code>State</code> to store the current RNG in:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Random</span>
<span class="kw">import </span><span class="dt">Control.Monad.State</span>

<span class="ot">dieRoll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">State</span> g <span class="dt">Int</span>
dieRoll <span class="fu">=</span> state (randomR (<span class="dv">1</span>, <span class="dv">6</span>))

<span class="ot">twoDice ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">State</span> g <span class="dt">Int</span>
twoDice <span class="fu">=</span> (<span class="fu">+</span>) <span class="fu">&lt;$&gt;</span> dieRoll <span class="fu">&lt;*&gt;</span> dieRoll

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  gen <span class="ot">&lt;-</span> newStdGen
  print (evalState twoDice gen)</code></pre></div>
<p>Now we can run more complex programs that employ random numbers. Note that <code>newStdGen</code> can be replaced with <code>mkStdGen :: Int -&gt; StdGen</code> if you want to provide an integral seed instead of using the global <code>StdGen</code>.</p>
<p>You can avoid some of the state boilerplate and get a few more benefits by bringing in the <a href="https://hackage.haskell.org/package/MonadRandom-0.5"><code>MonadRandom</code></a> package. Here’s some code that accomplishes the same goal using <code>MonadRandom</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Random</span>
<span class="kw">import </span><span class="dt">Control.Monad.Random</span>

<span class="ot">dieRoll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Int</span>
dieRoll <span class="fu">=</span> getRandomR (<span class="dv">1</span>, <span class="dv">6</span>)

<span class="ot">twoDice ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Int</span>
twoDice <span class="fu">=</span> (<span class="fu">+</span>) <span class="fu">&lt;$&gt;</span> dieRoll <span class="fu">&lt;*&gt;</span> dieRoll

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  gen <span class="ot">&lt;-</span> newStdGen
  print (evalRand twoDice gen)</code></pre></div>
<p>Apart from providing a nice way to write (slightly) terser randomness code, <code>MonadRandom</code> is more explicit about the domain we’re working in, and ships with a couple of killer utilities; namely, the minimalistic sampling functions <code>uniform</code> and <code>fromList</code> (also <code>weighted</code> from <code>MonadRandom 0.5</code>). This program, for example, generates a list of 20 moves that might come up in a Dance Dance Revolution song:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">Control.Monad.Random</span>
<span class="kw">import </span><span class="dt">System.Random</span>

<span class="kw">data</span> <span class="dt">Direction</span> <span class="fu">=</span> <span class="dt">U</span> <span class="fu">|</span> <span class="dt">D</span> <span class="fu">|</span> <span class="dt">L</span> <span class="fu">|</span> <span class="dt">R</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)

<span class="ot">step ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Direction</span>
step <span class="fu">=</span> uniform [<span class="dt">U</span>,<span class="dt">D</span>,<span class="dt">L</span>,<span class="dt">R</span>]

<span class="ot">stepWeighted ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Direction</span>
stepWeighted <span class="fu">=</span>
    fromList [(<span class="dt">U</span>, <span class="dv">1</span>), (<span class="dt">D</span>, <span class="dv">1</span>), (<span class="dt">L</span>, <span class="dv">50</span>), (<span class="dt">R</span>, <span class="dv">100</span>)]

<span class="ot">danceDanceRevolutionScroll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g [<span class="dt">Direction</span>]
danceDanceRevolutionScroll <span class="fu">=</span> replicateM <span class="dv">20</span> <span class="fu">$</span> <span class="kw">do</span>
    weightIt <span class="ot">&lt;-</span> uniform [<span class="dt">True</span>, <span class="dt">False</span>]
    <span class="kw">if</span> weightIt <span class="kw">then</span> stepWeighted <span class="kw">else</span> step

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  gen <span class="ot">&lt;-</span> newStdGen
  print (evalRand danceDanceRevolutionScroll gen)</code></pre></div>
<p><code>fromList</code> lets you specify weights for your random elements. <code>L</code> and <code>R</code> will probably show up a lot more than the other two directions when this is run.</p>
<p><code>MonadRandom</code> supplies some other conveniences as well, but it’s not crazy stuffed with functionality. It’s a nice package that contains the minimal amount of code to be useful but not overengineered.</p>
<p>That said, sometimes you need more. First off, what about different distributions? The normal distribution is a pretty common necessity. <a href="https://hackage.haskell.org/package/random-fu"><code>random-fu</code></a> really shines in this domain. You’ll have to pull in the <a href="https://hackage.haskell.org/package/rvar"><code>rvar</code></a> package as well to run this next example, which will print out a random number pulled from a normal distribution with mean <code>100</code> and a standard deviation of <code>5</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">System.Random</span>
<span class="kw">import </span><span class="dt">Data.Random</span>
<span class="kw">import </span><span class="dt">Data.RVar</span>
<span class="kw">import </span><span class="dt">Control.Monad.State</span>

<span class="ot">normalNumber ::</span> <span class="dt">State</span> <span class="dt">StdGen</span> <span class="dt">Double</span>
normalNumber <span class="fu">=</span> sampleRVar (normal <span class="dv">100</span> <span class="dv">5</span>)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  gen <span class="ot">&lt;-</span> newStdGen
  print (evalState normalNumber gen)</code></pre></div>
<p>Notice the <code>State</code> pattern from earlier. Also, there a bunch of common distributions that ship with <code>random-fu</code>.</p>
<p>One last thing I should mention is that we’re not tied to <code>StdGen</code>, the RNG that ships with <code>random</code>.</p>
<p>In fact, it does not have strong statistical properties, and should probably be avoided for many “real” applications (See <a href="https://www.reddit.com/r/haskell/comments/3x15sm/why_is_the_first_random_value_produced_from_a/">this reddit post</a>, and thank you to reddit user tom-md for the note!).</p>
<p>There are faster and more stable ones ones, like <code>PureMT</code> from <a href="https://hackage.haskell.org/package/random-source"><code>random-source</code></a> or <code>TFGen</code> from <a href="https://hackage.haskell.org/package/tf-random"><code>tf-random</code></a>. These are both instances of <code>RandomGen</code>, so you can plug either one of those in wherever you saw the generic type signature <code>RandomGen g =&gt; ...</code> in this post. For example, mixing <code>PureMT</code> back into <code>MonadRandom</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad.Random</span>
<span class="kw">import </span><span class="dt">Data.Random.Source.PureMT</span>

<span class="ot">dieRoll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Int</span>
dieRoll <span class="fu">=</span> getRandomR (<span class="dv">1</span>, <span class="dv">6</span>)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> newPureMT <span class="fu">&gt;&gt;=</span> print <span class="fu">.</span> evalRand dieRoll </code></pre></div>
<p>Is there anything else you’d like to know about randomness in Haskell? Let me know in the comments!</p>
<p>Ben</p>
</div>
]]></summary>
</entry>
<entry>
    <title>External Stuff</title>
    <link href="http://kovach.me/posts/2017-01-27-external-stuff.html" />
    <id>http://kovach.me/posts/2017-01-27-external-stuff.html</id>
    <published>2017-01-27T00:00:00Z</published>
    <updated>2017-01-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<p>I realized this morning that I don’t have links to any of this external-but-relevant stuff anywhere on the site, and I want to change that just to keep everything in one place!</p>
<p>Last year, I wrote a guest post on Stack Overflow’s hiring blog about my preferred technical interviewing strategy. <a href="https://www.stackoverflowbusiness.com/blog/interviewing-a-developer-try-the-project-walkthrough-technique">You can read about the project walkthrough technique here.</a></p>
<p>I have a YouTube channel! I ran a series called “Breakfast Bash” here containing little blurbs about basic computer science concepts. There’s also a three hour Haskell workshop VOD put together by me and Matt Parsons. <a href="https://www.youtube.com/user/5outhSix">You can see that here.</a></p>
<p>I gave a talk at the Developers of Athens Meetup Group about Lockhart’s Lament and how it applies to programming. <a href="/pdfs/lockharts-lament.key">The slides are here</a>; I would love to give this talk again to a larger crowd.</p>
<p>That’s all for now! Just some stuff I wanted to consolidate.</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Announcing Trash Kings</title>
    <link href="http://kovach.me/posts/2017-01-22-trash-kings.html" />
    <id>http://kovach.me/posts/2017-01-22-trash-kings.html</id>
    <published>2017-01-22T00:00:00Z</published>
    <updated>2017-01-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<p>I’m working on a tile laying game! It’s called <em>Trash Kings</em>. Here’s the premise:</p>
<blockquote>
<p><em>It’s drop-off day at the dump. As a scavenging rodent, you must do what ever it takes to earn your claim over the wealth of new garbage. Will you gather the best waste and earn the title of Trash King?</em></p>
</blockquote>
<p>Here’s what the prototype looks like:</p>
<p><img width="80%" src="/images/trash_kings_prototype.jpg"></img></p>
<p>In <em>Trash Kings</em>, players place tiles on an expanding board in order to create and claim mounds. Players will gain points based on mounds they claim throughout the game. The player with the most points at the end wins!</p>
<p>The game draws a lot of inspiration from <a href="https://boardgamegeek.com/boardgame/822/carcassonne">Carcassonne</a>, but there are a few mechanics that make it feel unique. In Trash Kings, you have the option of swapping tiles around on the game board in order to create areas to control.</p>
<p>Certain configurations of tiles prevent other players from swapping out important tiles on the game board, and using these is the key to beating out your opponents. Also, the way the game is scored during and at the end of the game differs, necessitating the use of multiple strategies during the course of the game.</p>
<p>You can download the rulebook <a href="/pdfs/trash_kings_rule_book.pdf">here</a>, and a print &amp; play version of the game <a href="/pdfs/game_components.pdf">here</a>.</p>
<p><em>Trash Kings</em> is very much a work in progress. Every time I have played it (with my wife, or alone as multiple players) I tweak something about it. I’m open to any and all feedback, which can be sent to <a href="mailto:bkovach13@gmail.com">bkovach13@gmail.com</a> or left as a comment on this blog post.</p>
<p>Enjoy!</p>
</div>
]]></summary>
</entry>
<entry>
    <title>Italy Travel Log</title>
    <link href="http://kovach.me/posts/2016-12-28-honeymoon.html" />
    <id>http://kovach.me/posts/2016-12-28-honeymoon.html</id>
    <published>2016-12-28T00:00:00Z</published>
    <updated>2016-12-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<h2 id="venice">12/12/2016 (Venice)</h2>
<p>Today we finished up the longest flight of our lives! 12 hours to Paris, then 2 more into Venice with hardly any rest. We made our way to the hotel via a bus ride and a water bus (vaporetto) ride through the Grand Canal. Fewer people speak English than we expected, but we’re getting by. Thanks Duolingo! Our B&amp;B hosts at <a href="http://www.dimoramarciana.com/">Dimora Marciana</a> are all really nice, and gave us food recommendations and a walking route to get a feel for the city. After crashing for about an hour in the hotel room, we ate at one of the recommended restaurants. I accidentally ordered something with nuts, so Amanda and I ended up having to switch dishes, leaving her with a sad couscous salad, and I ate the delicious cannelloni she ordered. Oops! Otherwise, it was pretty good! After lunch, we set off on the recommended walking route, which took us through San Marco, the Accademia district, Dorsoduro, over the Rialto bridge and back to our hotel. Very pretty and maze-like with lots of interesting shops along the way. Amanda remembers nothing from that walk, since she was a sleep-deprived zombie. Thank goodness for pictures! We stopped briefly for some cappuccinos at a cafe (which we later learned was a faux pas- no milk after breakfast!). We were hungry for dinner around 5:30, but no restaurants are open between 2:30 and 6:30… so we ate gelato for dinner! Heading in for an early bedtime (like 6:00 PM) because we are both exhausted.</p>
<p><a data-lightbox="day-1" href="/images/italy/day1/IMG_1318.jpg"
  data-title="Canals"> <img class="round-image"
      src="/images/italy/day1/IMG_1318.jpg"
      style="height:200px; border-radius:4px;margin:5px"/> </a> <a data-lightbox="day-1"
  data-title="View from the Rialto Bridge"
  href="/images/italy/day1/IMG_1319.jpg"> <img class="round-image"
        src="/images/italy/day1/IMG_1319.jpg"
        style="height:200px; border-radius:4px;margin:5px"/> </a> <a data-lightbox="day-1"
  data-title=""
  href="/images/italy/day1/IMG_1321.jpg"> <img class="round-image"
        src="/images/italy/day1/IMG_1321.jpg"
        style="height:200px; border-radius:4px;margin:5px"/> </a> <a data-lightbox="day-1" href="/images/italy/day1/IMG_1324.jpg"> <img class="round-image"
        src="/images/italy/day1/IMG_1324.jpg"
        style="height:200px; border-radius:4px;margin:5px"/> </a> <a data-lightbox="day-1" data-title="Rialto at sunset"
  href="/images/italy/day1/IMG_1325.jpg"> <img class="round-image"
        src="/images/italy/day1/IMG_1325.jpg"
        style="height:200px; border-radius:4px;margin:5px"/> </a> <a data-lightbox="day-1" data-title="Our marked up Venice map!" href="/images/italy/day1/IMG_1690.jpg"> <img class="round-image"
        src="/images/italy/day1/IMG_1690.jpg"
        style="height:200px; border-radius:4px;margin:5px"/> </a></p>
<h2 id="venice-1">12/13/2016 (Venice)</h2>
<p>We slept like babies! And breakfast at Dimora Marciana was so good! Excellent cappuccinos and a variety of pastries, meats, cheeses and croissants. Every espresso drink here is perfect! How do they do it?? After breakfast, we set out for Piazza San Marco with an audio tour we’d downloaded onto our phones. This was a good idea, because it pointed out a lot of interesting subtle details about the piazza that we wouldn’t have noticed otherwise. For example, the surrounding buildings are built with three completely separate styles of column, because the floors were built in different eras. Visual stories are also told on the columns beneath Doge’s Palace (the dwelling place of the historic ruler of Venice) - very cool. We saw a carving story of a couple meeting, courting, marrying, conceiving a child, hugging their child, finding out the child is sick, and then burying their child…Poor little statue family :( After the audio tour, we went into Doge’s Palace, which has been turned into a museum. Every ceiling is painted beautifully; it’s incredible. The transition from the palace to the jails (over the Bridge of Sighs) is a surreal experience. It’s a weird couple of steps from gilded halls to drab, thick stone walls and plain prison cells. When we were done, we walked around town a little and found a place to eat. I had seafood risotto (with lots of seafood I’d never seen before!) and Amanda had some salmon pasta. Both were delicious. We took an afternoon break and waited for a vegetarian place to open for dinner. We wandered around for an hour and a half through the rainy alleyways, dodging beggar ladies and getting chased by a man who wanted to sell us a rose. It was really dark and creepy, and the restaurant was hard to find. When we finally found it and then waited for them to open, they were completely booked! Huge bummer, but we went to a place called Tuttinpietti instead for some pasta, which we ate in our room. It was great anyway, so whatever. Afterwards, we set back out for a gelato place called SuSo, determined to mark off a win for the night. We got super lost, and by the time we found it, it had just closed! Agh! We went back to our rooms, tired and gelato-less, ate some chocolate raisins that we had brought on the plane for dessert and went to bed. Oh well! Dessert before dinner tomorrow! Eventually we’ll figure out this meal thing…</p>
<p><a data-lightbox="day-2" href="/images/italy/day2/IMG_1327.jpg" data-title="Saint Mark's Cathedral"><img src="/images/italy/day2/IMG_1327.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1330.jpg" data-title=""><img src="/images/italy/day2/IMG_1330.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1332.jpg" data-title="The Watchtower"><img src="/images/italy/day2/IMG_1332.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1336.jpg" data-title=""><img src="/images/italy/day2/IMG_1336.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1338.jpg" data-title="Amanda's appropriate reaction to the Bridge of Sighs"><img src="/images/italy/day2/IMG_1338.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1340.jpg" data-title=""><img src="/images/italy/day2/IMG_1340.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1343.jpg" data-title="Creepy"><img src="/images/italy/day2/IMG_1343.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1351.jpg" data-title="Ceilings in Doge's Palace"><img src="/images/italy/day2/IMG_1351.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1357.jpg" data-title=""><img src="/images/italy/day2/IMG_1357.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1358.jpg" data-title="More ceilings"><img src="/images/italy/day2/IMG_1358.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1361.jpg" data-title="Zweihanders!"><img src="/images/italy/day2/IMG_1361.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1364.jpg" data-title=""><img src="/images/italy/day2/IMG_1364.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1366.jpg" data-title="A family tree"><img src="/images/italy/day2/IMG_1366.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1367.jpg" data-title="Walking through the Bridge of Sighs"><img src="/images/italy/day2/IMG_1367.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1371.jpg" data-title="Down into the prisons"><img src="/images/italy/day2/IMG_1371.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1372.jpg" data-title=""><img src="/images/italy/day2/IMG_1372.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1383.jpg" data-title=""><img src="/images/italy/day2/IMG_1383.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1388.jpg" data-title=""><img src="/images/italy/day2/IMG_1388.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1389.jpg" data-title="???"><img src="/images/italy/day2/IMG_1389.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1393.jpg" data-title="Cool hotel we randomly found while walking around at night"><img src="/images/italy/day2/IMG_1393.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1396.jpg" data-title=""><img src="/images/italy/day2/IMG_1396.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-2" href="/images/italy/day2/IMG_1376.jpg" data-title=""><img src="/images/italy/day2/IMG_1376.jpg" style="height:200px; border-radius:4px;margin:5px"/></a></p>
<h2 id="venice-2">12/14/2016 (Venice)</h2>
<p>We had planned to tour the islands (Murano and Burano) today, but we woke up groggy and postponed. Instead, we looked into touring Peggy Guggenheim’s old house-turned-museum. It was a very interesting place with exciting exhibits of modern art. Also, Gwendoline Christie (Brienne of Tarth from Game of Thrones) was there with us! Crazy! After the tour, we wandered around the Accademia district and made our way all the way to “the point” at the end of the island. It was a foggy, chilly day, but it was still very beautiful and peaceful. After a mediocre lunch at a touristy place, we rested for a bit. A little later on, we went to a place called I Tre Mercanti for some tiramisu (dessert before dinner!). It was so good that we inhaled it (literally…it was hard not to choke on all the cocoa powder on top)! Acqua Alta Libraria was in the same part of town, so we checked it out. This place must have been the coolest bookstore on the planet. The building is full of books from floor to ceiling, piled on tables and old gondolas. We grabbed a couple of Christmas gifts here and headed back to the hotel room, still very tired from jet lag and the last few days. Looking forward to the Murano/Burano trip tomorrow!</p>
<p><a data-lightbox="day-3" href="/images/italy/day3/IMG_1402.jpg" data-title=""><img src="/images/italy/day3/IMG_1402.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-3" href="/images/italy/day3/IMG_1406.jpg" data-title=""><img src="/images/italy/day3/IMG_1406.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-3" href="/images/italy/day3/IMG_1413.jpg" data-title="Acqua Alta Libraria"><img src="/images/italy/day3/IMG_1413.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-3" href="/images/italy/day3/IMG_1414.jpg" data-title=""><img src="/images/italy/day3/IMG_1414.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-3" href="/images/italy/day3/IMG_1404.jpg" data-title="View from 'the point'"><img src="/images/italy/day3/IMG_1404.jpg" style="height:200px; border-radius:4px;margin:5px"/></a></p>
<h2 id="murano-burano">12/15/2016 (Murano, Burano)</h2>
<p>We got a good night’s rest last night and headed out to get on a boat to Burano island late in the morning. The walk was nice - the area near Fondamente Nove (the water bus station) was relaxed. We hopped on a water bus and passed a few islands - a walled city, and Murano, the glass blowing island. The travel time to Burano was pretty long (about 50 minutes) but we eventually made it to the island of lace and colorful houses! It was kind of like a very-tiny Venice with a small fraction of the population. We sought out the lace museum, which was a disappointment, but only 5 euros each, so whatever. It turns out that the history of lace is super boring! But there were old women from Burano making lace there, which was a fascinating process! We expected to spend more time there, so we had some downtime for a coffee (coffee in Italy means a single shot of espresso) at a local bar before our lunch reservation. We also walked around the island for a while, saw the leaning clock tower, and relaxed by the seaside. Lunch was intense. We went to a place called Gatto Nero and both had a portion of seafood spaghetti; it was the most involved meal I’ve ever eaten, with several shellfish and other seafood. It was super tasty. The second course was a plate of seafood fritto misto. Some of that was good and some of it wasn’t. I liked this part a lot more than Amanda did. The best part of the plate was fried salted cod. We split a bottle of tasty white wine with this meal, too, then capped off the 2 hour long lunch with a shot of espresso. It was getting late in the day at this point, but we wanted to see Murano, so we got on the next water taxi and headed that way. We browsed a couple of shops here and picked up some glass creations. The glass here was stunning; I wish we’d been able to stay a bit longer, but it was getting late and dark. For the first time, we understood why dinner here is served so late- after that huge, long lunch, we were not expecting to be hungry until at least 8:00! When we got back to mainland Venice, we stopped by a shop for a hot chocolate, which is more like a shot of warm chocolate than the kind we’re used to. Something from the day ended up making Amanda sick that night, unfortunately. :( Her sickness was so rough, that she got actual whiplash from throwing up so hard. She keeps calling it “power puking”…gross.</p>
<p><a data-lightbox="day-4" href="/images/italy/day4/IMG_1419.jpg" data-title="Colorful Burano houses!"><img src="/images/italy/day4/IMG_1419.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-4" href="/images/italy/day4/IMG_1420.jpg" data-title="Cats!"><img src="/images/italy/day4/IMG_1420.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-4" href="/images/italy/day4/IMG_1421.jpg" data-title=""><img src="/images/italy/day4/IMG_1421.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-4" href="/images/italy/day4/IMG_1426.jpg" data-title="Amanda with some guy"><img src="/images/italy/day4/IMG_1426.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-4" href="/images/italy/day4/IMG_1428.jpg" data-title=""><img src="/images/italy/day4/IMG_1428.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-4" href="/images/italy/day4/IMG_1430.jpg" data-title="Our crazy seafood spaghetti"><img src="/images/italy/day4/IMG_1430.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-4" href="/images/italy/day4/IMG_1431.jpg" data-title="'Coffee is an art'"><img src="/images/italy/day4/IMG_1431.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-4" href="/images/italy/day4/IMG_1432.jpg" data-title="Huge glass sculpture in Murano"><img src="/images/italy/day4/IMG_1432.jpg" style="height:200px; border-radius:4px;margin:5px"/></a></p>
<h2 id="venice-3">12/16/2016 (Venice)</h2>
<p>A day of rest! Mandy needed some recovery time from last night, so we didn’t do a whole lot. We did get some delicious fresh pasta from a place called Dal Moro’s for lunch, though. I spent a bit of the day planning for what to do in Florence. We rallied a little later to go grab a slice of pizza for dinner at Antico Forno. Venice was much busier on a Friday night, and there was even a (very good!) violinist playing music in one of the squares. The pizza, the walk, and the sparkling Christmas lights strung all around were really nice. A magical way to end our time in Venice!</p>
<h3 id="veniceflorence">12/17/2016 (Venice/Florence)</h3>
<p>This was the day we left Venice. We walked up to Rialto Bridge with our packed luggage and took a water bus to the train station. It was a beautiful day, so we sat in front, on the exterior of the boat. This is maybe my favorite part about Venice -boating down the Grand Canal is absolutely stunning! Once we made it to the train station, we had to gather our bearings. Neither of us had ever ridden on an EU train (or any passenger train?) before, so we weren’t sure of what to do. We eventually found our train and our seats and settled in. Well, so we thought - we were wrong! At the second stop, some Italian women kicked us out of our seats and we moved to the proper section of the train. After that minor speed bump, the ride was comfortable and quick. The destination train station in Florence was really overwhelming, though. The largest crowds we encountered in Venice were miniscule compared to the ones we found in Florence! We searched around everywhere for a bathroom in a huge crowd and had to ask a few people how to find the bus we were looking for. It all worked out, but there were thousands of people in the station and our bus came really late. Eventually it did come, and after a 20 minute bus ride, we arrived at our destination - the base of the hil our hotel sat on. Trudging up the hill with our heavy luggage on our backs was <em>so hard</em> after such an exhausting day, but finally arriving at the hotel in the Tuscan hills was a huge relief. We got a brief tour of the grounds at <a href="http://www.villaagape.it/">Villa Agape</a> and crashed for a little while. We had booked a wine tour for that night, though, so we couldn’t relax for too long! We were also starving after traveling with no lunch and were desperate to eat. So, we had our hotel’s shuttle drive us into Florence and we found a place to eat (hot pots with dumplings for a little variety; not that good!) and then made our way to Ponte Vecchio afterwards. Ponte Vecchio is the oldest bridge in Florence, and the meetup point for the start of our wine tour. Turns out, we were the only ones who booked the tour, so we got a surprise private tour of the city! We got some little wine glasses to carry around town and were shown some interesting landmarks (mostly little historic things about the city). As for wine, we tasted 5 kinds and ate some crostini. Amanda was still queasy about drinking white wine, but I enjoyed all of it! The most interesting story was the one about the “black rooster” emblem on Chianti wine bottles. We ended the tour at the duomo - a huge, beautiful, green and white church that took 150 years to complete! Then we got picked up by our hotel shuttle and crashed hard.</p>
<video id="gondolas" width="640" preload controls>
<source src="/images/italy/day5/gondola.mov" />
</video>
<p><a data-lightbox="day-5" href="/images/italy/day5/IMG_1448.jpg" data-title="Bye Venice!"><img src="/images/italy/day5/IMG_1448.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-5" href="/images/italy/day5/IMG_1472.jpg" data-title=""><img src="/images/italy/day5/IMG_1472.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-5" href="/images/italy/day5/IMG_1475.jpg" data-title=""><img src="/images/italy/day5/IMG_1475.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-5" href="/images/italy/day6/0YTw7.jpeg" data-title="New map, Florence this time!"><img src="/images/italy/day6/0YTw7.jpeg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-5" href="/images/italy/day6/IMG_1481.jpg" data-title="Our bed in Villa Agape"><img src="/images/italy/day6/IMG_1481.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-5" href="/images/italy/day6/IMG_1483.jpg" data-title="Hot pots "><img src="/images/italy/day6/IMG_1483.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-5" href="/images/italy/day6/IMG_1486.jpg" data-title="Important statue on Ponte Vecchio?"><img src="/images/italy/day6/IMG_1486.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-5" href="/images/italy/day6/IMG_1488.jpg" data-title="View from Ponte Vecchio at night"><img src="/images/italy/day6/IMG_1488.jpg" style="height:200px; border-radius:4px;margin:5px"/></a></p>
<h3 id="florence">12/18/2016 (Florence)</h3>
<p>This was our food tour day, so we woke up extra early to meet with the tour guide at 9:30! We ate a tiny bite to eat at the hotel so we would be hungry for the tour and got the earliest shuttle ride possible to meet up in time. We told the shuttle driver to pick us up at 6:30 that evening, since we anticipated doing some museum tours and shopping after the 4-hour food tour. Sadly, once we rushed across town to get there in time, we suddenly realized…nobody else was there. We had done all that and we had shown up for the tour on the wrong day! Major oops! After kicking ourselves (and laughing a lot) for messing up so badly, we decided to make the most of the day anyway. We headed to the Uffizi gallery first. Wow, that museum is huge! There were a ton of paintings and statues - just the amount of art in one place was impressive. The most popular parts were the few Da Vinci and Michelangelo paintings. I didn’t get a picture, but I also loved the shield with medusa’s head painted on it. We found a little sandwich shop called Antico Noe and had some roast beef paninis on a little back road afterwards (we were <em>starving</em>! We were expecting a food tour!). Afterwards, we found a little pastry shop and split a chocolate ganache tart with some coffee. Oooh yummy! The never-ending bakery options were heaven to Amanda! Then we wandered around looking for the Christmas market. We thought we found it, but what we found was actually a tiny little market square, with some church bake sale going on. Eventually, we wandered into the real Christmas market, which is significantly bigger and in a large square. It’s mostly German food and imported things. A little underwhelming.</p>
<p>We still had half a day left before the shuttle was coming back, so we decided to visit the Boboli Gardens. These are the expansive sculpture gardens behind the Pitti Palace, which was home to Cosimo I of the Medici family. Holy cow, that place is <em>massive</em>! And beautiful, too! We saw a man feeding some ducks and pigeons in a pond, and a happy kid playing with the pigeons - a couple of nice, memorable moments. Along with the Boboli Gardens ticket, we got access to a costume museum, which we visited after exhausting ourselves in the gardens. The old clothing was neat, especially the clothes that the royal family (Cosimo I and Eleanora) had been buried in, although it was a bit morbid. Afterwards, we popped into a pastry shop for a cannoli - Amanda had been looking for a good one. We split it and it was really yummy! I wish we had gotten two. For dinner, Mandy was feeling a little homesick and found some American place called The Diner. It was weird to see a depiction of US culture in Italy - they had paintings of historical desegregation moments and fat people on the walls! I had some particularly odd pureed chicken soup, and Amanda ate a burger and fries. The burger wasn’t bad! Not long after we ate, we got picked up and went to bed around 8 PM. This was one of the most exhausting days of my life. We walked a total of 10 miles, and boy were our legs sore!</p>
<p><a data-lightbox="day-7" href="/images/italy/day7/IMG_1498.jpg" data-title="Duomo"><img src="/images/italy/day7/IMG_1498.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1535.jpg" data-title="Art!"><img src="/images/italy/day7/IMG_1535.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1536.jpg" data-title=""><img src="/images/italy/day7/IMG_1536.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1544.jpg" data-title="This man has no skin..."><img src="/images/italy/day7/IMG_1544.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1548.jpg" data-title=""><img src="/images/italy/day7/IMG_1548.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1551.jpg" data-title="Hermaphrodite, cool sculpture"><img src="/images/italy/day7/IMG_1551.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1553.jpg" data-title=""><img src="/images/italy/day7/IMG_1553.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1555.jpg" data-title=""><img src="/images/italy/day7/IMG_1555.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1556.jpg" data-title=""><img src="/images/italy/day7/IMG_1556.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1564.jpg" data-title=""><img src="/images/italy/day7/IMG_1564.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1565.jpg" data-title="Leo!"><img src="/images/italy/day7/IMG_1565.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1580.jpg" data-title=""><img src="/images/italy/day7/IMG_1580.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1582.jpg" data-title="Pitti Palace is huge"><img src="/images/italy/day7/IMG_1582.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1587.jpg" data-title="Tired from the walking"><img src="/images/italy/day7/IMG_1587.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1588.jpg" data-title="Turtles are holdiing this up!"><img src="/images/italy/day7/IMG_1588.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1594.jpg" data-title=""><img src="/images/italy/day7/IMG_1594.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1598.jpg" data-title="Nelson Bighetti"><img src="/images/italy/day7/IMG_1598.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1603.jpg" data-title=""><img src="/images/italy/day7/IMG_1603.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1610.jpg" data-title=""><img src="/images/italy/day7/IMG_1610.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1613.jpg" data-title="My favorite shot from the whole trip. Beautiful view!"><img src="/images/italy/day7/IMG_1613.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1615.jpg" data-title="Old clothes"><img src="/images/italy/day7/IMG_1615.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-7" href="/images/italy/day7/IMG_1597.jpg" data-title="Bird man with his pigeons and ducks"><img src="/images/italy/day7/IMG_1597.jpg" style="height:200px; border-radius:4px;margin:5px"/></a></p>
<h3 id="florence-1">12/19/2016 (Florence)</h3>
<p>We slept well last night. We had to get up early today to catch the <em>real</em> food tour, which was rough but we managed. We ate a little more this morning than yesterday, because it was painful to deprive ourselves of delicious free breakfast two days in a row, and we headed out to our first stop - a butcher shop! There were wild boar heads on the wall, sausages hanging from the ceiling, and tons of prosciuttos curing on the walls. It was like nothing I’ve ever seen before. There were seven of us on the tour - four from Wisconson and one other guy from Suwanee, GA (where I grew up)! Small world! Everyone was really nice, including our amazing tour guide, Martina. We started off by tasting a few prosciuttos, one cured with only salt and one with black pepper added. We went to a bakery next. We had some coccoli (a savory fried bread donut thing) with mozzarella and tomato inside. The next stop was the big one - the central market - a giant, two story farmer’s market. We ate some sandwiches with boiled brisket on the bottom floor and took a short break for some coffee and shopping upstairs. After the break, we hit up a pastry shop for some cream pasteries (very big buttery custard danish-type things) and headed to an enoteca - a wine bar - to have some crostini and wine. This place was small but packed full of wine, oil, balsamic vinegar and a variety of cheeses for sale. Here I learned that real balsamic vinegar is incredible, but expensive. It costs 90 euros for a small bottle, fermented and bottled by the Modena government. Olive oil in Italy also has a much stronger flavor, which is quite nice. All of the crostini and appetizer-type things we ate were good as well, except the “special treat” of a liver-based topping, Crostini Toscani, which we didn’t like. The wines we tasted here were good, but the real stars of this stop were the oil and vinegar, surprisingly! The last stop on the tour was a chocolate shop called Vestri. The family who owns this place controls every step of the chocolate production, from the cacao farm to finished chocolate. The chocolate was some of the best we’ve ever had; I tried a sipping chocolate “shot” with some anice liqueur. Yum. We then parted ways. I highly recommend doing one of these food tours in Florence; it was probably our favorite part of the whole trip.</p>
<p>We had two hours before our shuttle was scheduled to pick us up, so we decided to check out the Museo Galilei before heading back to the hotel. This was a very interesting museum, containing lots of old scientific tools. One of the most impressive was a three dimensional “map of the universe” that took 5 years to complete. Lots of other hidden treasures in here as well. I’m glad we went; it was a nice break from art museums, but it was torture that we couldn’t play with the amazing tools and devices! Afterwards, we waited for our shuttle for 15 minutes before realizing…they weren’t coming. We had to find a phone to use to call the hotel. We walked and walked, looking for pay phones, which were all BROKEN, or tourism offices, which were completely unhelpful! Eventually, we came across another hotel and asked the concierge (named Eliza - We’ll never forget her because it felt like she was saving our lives!!) to help us out. She got a hold of the shuttle and we were able to finally get picked up soon after. We were stranded for a minute, though, after an extremely long day! I was getting very cranky. We rested for a few hours before heading down to San Miniaio Square for dinner. We ate pizza with delicious Italian toppings like truffles and prosciutto. It was lovely. It’s supposed to rain tomorrow but we’re going to try to see David and finish our Christmas shopping. Other than that, we’ll try to relax and get ready for the trip home. Amanda has been nocturnal since her night up with food poisoning, and her neck still can’t turn, so we will try visiting a pharmacy tomorrow.</p>
<p><a data-lightbox="day-8" href="/images/italy/day8/IMG_1626.jpg" data-title="Real stuffed pigs playing poker??"><img src="/images/italy/day8/IMG_1626.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1628.jpg" data-title="Chocolate!"><img src="/images/italy/day8/IMG_1628.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1631.jpg" data-title="Wine!"><img src="/images/italy/day8/IMG_1631.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1633.jpg" data-title="More chocolate!"><img src="/images/italy/day8/IMG_1633.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1634.jpg" data-title="Dante Alighieri"><img src="/images/italy/day8/IMG_1634.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1635.jpg" data-title=""><img src="/images/italy/day8/IMG_1635.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1640.jpg" data-title="Map of the universe"><img src="/images/italy/day8/IMG_1640.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1642.jpg" data-title=""><img src="/images/italy/day8/IMG_1642.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1646.jpg" data-title="A flat map of the world"><img src="/images/italy/day8/IMG_1646.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1652.jpg" data-title="That's Galileo's REAL, DEAD FINGER"><img src="/images/italy/day8/IMG_1652.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1655.jpg" data-title=""><img src="/images/italy/day8/IMG_1655.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1659.jpg" data-title="Things that can go wrong with childbirth :X"><img src="/images/italy/day8/IMG_1659.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-8" href="/images/italy/day8/IMG_1666.jpg" data-title="Za"><img src="/images/italy/day8/IMG_1666.jpg" style="height:200px; border-radius:4px;margin:5px"/></a></p>
<h2 id="florence-2">12/20/2016 (Florence)</h2>
<p>We did get some relaxation in today! Breakfast was good, but Amanda tried to get by on cheese and honey (a weird choice). We slept in a bit and headed out of the hotel around 10:00. We immediately headed towards the Accademia Gallery, where David is located. After waiting in a line for about 20 minutes, we made it in. Everyone and their mother told us to pre-purchase a ticket online to skip the waiting part. We should have listened, but it could have been much worse! The museum isn’t very big; it’s just a single corridor and a few rooms. The main attraction really is David. It is hugely impressive, though. We both found the full-size statue remarkable. We spent probably 20 minutes there, staring at the giant statue and browsing some of Michelangelo’s unfinished sculptures. Afterwards, it was shopping day! First, we found a reputable leather shop and got Amanda a new purse. This place was in the market square, so we picked up some veggie samosas from a hole in the wall Indian restaurant for lunch while we were in the area. The next stop was the huge central market for food-related gifts! Here, we got some cheese, oil, vinegar and coffee for our friends and family. We also caved and bought some traditional balsamic vinegar for ourselves. The last stop we made was at Massimo Ravinale for some silk; the man who helped us out was notably very helpful. After a quick last-minute cannoli (we can’t stop eating dessert in between every meal!), we went back to the hotel and packed some stuff up in preparation for tomorrow. And we binge watched Please Like Me (it’s an Australian show on European Netflix here). It was a nice stretch of relaxation we’d been needing. At 7:30, we went to dinner at a place called Zeb, which was recommended by our food tour guide. We had two types of ravioli (pear-peccorino and yellow pumpkin with butter sauce), a peppery beef stew called peposo, a few glasses of wine and a salted chocolate torte. It was the best meal we had in Italy. A perfect way to end our trip to Florence! We leave in the morning (at 5:00 AM) and will really miss it here. The whole experience was unforgettable!</p>
<p><a data-lightbox="day-9" href="/images/italy/day9/IMG_1670.jpg" data-title="David is pretty big"><img src="/images/italy/day9/IMG_1670.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-9" href="/images/italy/day9/IMG_1671.jpg" data-title=""><img src="/images/italy/day9/IMG_1671.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-9" href="/images/italy/day9/IMG_1673.jpg" data-title="Hm, what's this..."><img src="/images/italy/day9/IMG_1673.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-9" href="/images/italy/day9/IMG_1674.jpg" data-title="WHAT IS THAT LITTLE MAN DOING??"><img src="/images/italy/day9/IMG_1674.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-9" href="/images/italy/day9/IMG_1675.jpg" data-title="A bakery"><img src="/images/italy/day9/IMG_1675.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-9" href="/images/italy/day9/IMG_1683.jpg" data-title="Butternut squash ravioli"><img src="/images/italy/day9/IMG_1683.jpg" style="height:200px; border-radius:4px;margin:5px"/></a> <a data-lightbox="day-9" href="/images/italy/day9/IMG_1684.jpg" data-title="Peposo"><img src="/images/italy/day9/IMG_1684.jpg" style="height:200px; border-radius:4px;margin:5px"/></a></p>
</div>
]]></summary>
</entry>
<entry>
    <title>Monoids in Theory and in Haskell</title>
    <link href="http://kovach.me/posts/2016-06-08-monoids.html" />
    <id>http://kovach.me/posts/2016-06-08-monoids.html</id>
    <published>2016-06-08T00:00:00Z</published>
    <updated>2016-06-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[
<div class="post_body">
	<h2 id="overview">Overview</h2>
<p>This is the second in a series of posts about category theory and its relationship with Haskell. We’ll be exploring monoids in this post!</p>
<h2 id="the-monoid-intuitively">The monoid (intuitively)</h2>
<p>A monoid is a mathematical object, just like a category, <a href="http://kovach.me/posts/2016-06-01-categories.html">which we explored in the last post</a>. Intuitively, a monoid is a structure which encodes the ability to concatenate two things, and a zero-like element which, when used in concatenation, does not affect the other element. Let’s look at a typical mathematical formulation of a monoid:</p>
<p>A <strong>monoid</strong> is a set <span class="math inline"><em>M</em></span> equipped with a binary operation <span class="math inline">× : <em>m</em> → <em>m</em> → <em>m</em></span> and a special element <span class="math inline">1 ∈ <em>M</em></span> such that <span class="math inline">1</span> and <span class="math inline">×</span> satisfy the following laws:</p>
<ul>
<li>Associativity: <span class="math inline">(<em>x</em> × <em>y</em>)×<em>z</em> = <em>x</em> × (<em>y</em> × <em>z</em>)</span></li>
<li>Left and right unit laws: <span class="math inline">1 × <em>x</em> = <em>x</em> = <em>x</em> × 1</span></li>
</ul>
<p>I wouldn’t be surprised at this point if, even without a heavy mathematical background, one could come up with an example of a monoid. Let’s look at a couple.</p>
<p>The monoid <span class="math inline">{ℝ, ×, 1}</span> is an obvious example of a monoid; that is, our set <span class="math inline"><em>M</em></span> is the <strong>real numbers</strong>, our binary operation is <strong>multiplication</strong>, and our <span class="math inline">1</span> element is the number <strong>1</strong>.</p>
<p>Another example of a monoid on numeric values is <span class="math inline">{ℤ, +, 0}</span>; the <strong>integers</strong> under <strong>addition</strong> with <span class="math inline">1</span> being <strong>0</strong>.</p>
<p>In the programming world, monoids show up all over the place as well. A well-known monoid, using haskell syntax, is <code>{[a], (++), []}</code> – the monoid of <strong>lists</strong> under <strong>concatentation</strong> with <span class="math inline">1</span> being the <strong>empty list</strong>.</p>
<h2 id="the-monoid-in-haskell">The monoid (in haskell)</h2>
<p>As a haskell programmer, the aforementioned definition for a monoid looks awfully familiar. The typeclass for <code>Monoid</code> looks almost the exact same, sans axioms, and modulo names, as the traditional mathematical formulation:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">class</span> <span class="dt">Monoid</span> m <span class="kw">where</span>
<span class="ot">  mempty ::</span> m <span class="co">-- Analogous to 1</span>
<span class="ot">  mappend ::</span> m <span class="ot">-&gt;</span> m <span class="ot">-&gt;</span> m <span class="co">-- Analogous to our binary operation </span></code></pre></div>
<p>We can even encode the three examples of monoids mentioned above in a very straightforward way:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Let&#39;s pretend Floats are the reals </span>
<span class="co">-- {R, *, 1}</span>
<span class="kw">newtype</span> <span class="dt">Product</span> <span class="fu">=</span> <span class="dt">Product</span>{<span class="ot"> runProduct ::</span> <span class="dt">Float</span> }

<span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Product</span> <span class="kw">where</span>
  mempty <span class="fu">=</span> <span class="dt">Product</span> <span class="dv">1</span>
  mappend (<span class="dt">Product</span> a) (<span class="dt">Product</span> b) <span class="fu">=</span> <span class="dt">Product</span> (a <span class="fu">*</span> b)

<span class="co">-- {Z, +, 0}</span>
<span class="kw">newtype</span> <span class="dt">Sum</span> <span class="fu">=</span> <span class="dt">Sum</span>{<span class="ot"> runSum ::</span> <span class="dt">Integer</span> }

<span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Sum</span> <span class="kw">where</span>
  mempty <span class="fu">=</span> <span class="dt">Sum</span> <span class="dv">0</span>
  mappend (<span class="dt">Sum</span> a) (<span class="dt">Sum</span> b) <span class="fu">=</span> <span class="dt">Sum</span> (a <span class="fu">+</span> b)

<span class="co">-- This one is defined in the Prelude</span>
<span class="co">-- {[a], ++, []}</span>
<span class="kw">instance</span> <span class="dt">Monoid</span> [a] <span class="kw">where</span>
  mempty <span class="fu">=</span> []
  mappend xs ys <span class="fu">=</span> xs <span class="fu">++</span> ys</code></pre></div>
<p>We have to verify that our instances follow the laws, which translated to haskell look like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Associativity</span>
(a <span class="ot">`mappend`</span> b) <span class="ot">`mappend`</span> c <span class="fu">==</span> a <span class="ot">`mappend`</span> (b <span class="ot">`mappend`</span> c)

<span class="co">-- Left/right unit laws</span>
mempty <span class="ot">`mappend`</span> a <span class="fu">==</span> a <span class="fu">==</span> a <span class="ot">`mappend`</span> mempty</code></pre></div>
<p>It is not so hard to reason through these laws for the instances listed above.</p>
<h2 id="the-monoid-in-category-theory">The monoid (in category theory)</h2>
<p>We’re not done quite yet, because category theorists have picked up on a quaint definition of a monoid:</p>
<blockquote>
<p>A <strong>monoid</strong> is a category with one object.</p>
</blockquote>
<blockquote>
<p>~ <a href="http://www.springer.com/us/book/9780387984032">Mac Lane, 1978</a></p>
</blockquote>
<p>Well, that’s convenient. But what is really going on here? Let’s look at a visual representation of the category theory interpretation of <span class="math inline">{ℤ, +, 0}</span> that we saw before*:</p>
<p><img src="/images/monoid.png" style="width:350px" class="center-block"></p>
<p><small>* The image gets a little messy with the negatives, but those are valid arrows as well.</small></p>
<p>Morphisms in our category are elements of <span class="math inline">ℤ</span>. This can be confusing if we have some expectation about the way arrows should look. But, recall that to define a morphism, we only need to be able to assign a source and target to them, which are totally abstract concepts. Our set of morphisms is then exactly <span class="math inline">ℤ</span>, where we just pick the same source and target for every single element.</p>
<p><span class="math inline"><em>i</em><em>d</em></span> is the arrow labeled <span class="math inline">0</span>:</p>
<p><img src="/images/morphisms_0.png" style="width:350px" class="center-block"></p>
<p>Here are two more arrows:</p>
<p><img src="/images/morphisms_1.png" style="width:350px" class="center-block"></p>
<p>Composing these arrows gives us something that looks like this, intuitively:</p>
<p><img src="/images/morphisms_2.png" style="width:350px" class="center-block"></p>
<p>Composition is addition, so this is equivalent to:</p>
<p><img src="/images/morphisms_3.png" style="width:350px" class="center-block"></p>
<p>An important thing to note here is that <strong>the object doesn’t really matter</strong>. The above diagrams should make sense regardless of what the source and target of the arrows are, as long as they’re the same thing. The source and target <strong>must</strong> be the same so we can compose freely. If they weren’t, we wouldn’t be guaranteed to “have access” to the start of any arrow in our monoid at the end of any other arrow, which would disallow composition. This means we necessarily only have a single object in our category.</p>
<p>So long as we have a monoid by the classical definition, we have a monoid by the category theoretical definition. The conceptual mapping of formulations (from classical to category theoretical) is:</p>
<ul>
<li><span class="math inline">× → ∘</span></li>
<li><span class="math inline">1 → <em>i</em><em>d</em></span></li>
</ul>
<p>The tricky thing here is that in category-theory-land, the morphisms might not really look like functions, or even arrows, as we might expect. An integer as a category morphism follows the laws if we plug in the right <span class="math inline"><em>i</em><em>d</em></span> and <span class="math inline">∘</span>, and that’s all that matters.</p>
<h2 id="the-connection">The connection</h2>
<p>Let’s formulate the aforementioned <code>Sum</code> as a legitimate haskell <code>Category</code> (<code>C</code> for <code>Category</code>):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">SumC</span> a b <span class="kw">where</span>
  <span class="dt">SumC</span><span class="ot"> ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">SumC</span> a a

<span class="kw">deriving</span> <span class="kw">instance</span> <span class="dt">Show</span> (<span class="dt">SumC</span> a b)

<span class="kw">instance</span> <span class="dt">Category</span> <span class="dt">SumC</span> <span class="kw">where</span>
  id <span class="fu">=</span> <span class="dt">SumC</span> <span class="dv">0</span>
  <span class="dt">SumC</span> x <span class="fu">.</span> <span class="dt">SumC</span> y <span class="fu">=</span> <span class="dt">SumC</span> (x <span class="fu">+</span> y)</code></pre></div>
<p>We can use GADTs to encode the monoid (read: category with a single object) of integers under addition. We are saying two things here:</p>
<ul>
<li>A <code>SumC</code> is constructed by an <code>Integer</code> (effectively, this means that a <code>SumC</code> <em>is</em> an <code>Integer</code>; this is just a wrapper).</li>
<li>Although we’re providing two type variables to <code>SumC</code>, we can only construct things of type <code>SumC a a</code>.</li>
</ul>
<p>In effect, if we view <code>SumC</code> as <code>cat</code> (the type of morphisms in a category), we can encode the monoid <span class="math inline">{ℤ, +, 0}</span> exactly as a <code>Category</code>. If you look closely, you’ll notice that we only have a single object in our category, and we don’t care what it is. This is exactly <code>a</code>. A <code>SumC</code> can only be constructed in one way, namely, by asserting that its source and target is <code>a</code>. The identity arrow is <code>0</code>, which we’d expect, and composing two arrows is adding their <code>Integer</code> values.</p>
<p>The category laws all hold, which you may check. This instance acts exactly like the builtin <code>Monoid</code> instance for the <code>Sum</code> we saw previously, modulo operator/function names*:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">SumC</span> <span class="dv">8</span> <span class="fu">.</span> id
<span class="dt">SumC</span> <span class="dv">8</span>
<span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> id <span class="fu">.</span> <span class="dt">SumC</span> <span class="dv">8</span>
<span class="dt">SumC</span> <span class="dv">8</span>
<span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="dt">SumC</span> <span class="dv">17</span> <span class="fu">.</span> <span class="dt">SumC</span> <span class="dv">90</span>
<span class="dt">SumC</span> <span class="dv">107</span></code></pre></div>
<p><small> * s/id/mempty, s/./+, s/SumC/Sum and you’ve got the original form. </small></p>
<p>Just like with a <code>Category</code>, this isn’t the only <code>Monoid</code> you can encode – you should be able to use this type of construction for any haskell <code>Monoid</code>.</p>
<p>Note that I wouldn’t actually recommend doing this in practice; it’s mainly a mental exercise. That said, I think it’s pretty cool that we can get very close to a category-theoretic formulation of what a monoid is in Haskell!</p>
</div>
]]></summary>
</entry>

</feed>
