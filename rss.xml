<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Abstract Nonsense</title>
        <link>http://kovach.me</link>
        <description><![CDATA[Ramblings by Benjamin Kovach]]></description>
        <atom:link href="http://kovach.me/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Mon, 30 Apr 2018 00:00:00 UT</lastBuildDate>
        <item>
    <title>A Story of Iteration: Generating "Blotch"</title>
    <link>http://kovach.me/posts/2018-04-30-blotch.html</link>
    <description><![CDATA[
<div class="post_body">
  <h3 id="introduction">Introduction</h3>
<p>At time of writing, “Blotch” is my most recent piece of generative artwork. It looks nothing like I had originally envisioned, and the iteration of the project was interesting in its own right. Getting this piece to a place that I actually liked was a long, fun, and somewhat arduous process punctuated with tons of intermediate results that look absolutely nothing like the final piece. This isn’t uncommon, and I want to talk about it. Feel free to scroll down to the bottom of this post or check out my <a href="/art.html">art page</a> to see the final result.</p>
<h2 id="section">1</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/001.png"></img></p>
<p>It all started with a square. I’ve been playing with a data structure that lets me index into a square lattice, and I wanted to render a flow field using it. The basic idea here is that we’re shoving a randomly angled unit vector into each position in the lattice constrained by that central square, then running an averaging filter over the field many times (averaging each vector with its eight neighbors). At the end, a bunch of streamlines are drawn through the flow field. It’s a simple idea that I revisit from time to time.</p>
<h2 id="section-1">2</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/002.png"></img></p>
<p>Next, I mixed up the rendering a bit by tapering the streamlines.</p>
<h2 id="section-2">3</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/003.png"></img></p>
<p>The same idea with much larger (and many fewer) lines.</p>
<h2 id="section-3">4</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/004.png"></img></p>
<p>Rendering in black <em>and</em> white gives this cool layering effect, but large blobs don’t seem to go anywhere, which was kind of a bummer.</p>
<h2 id="section-4">5</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/005.png"></img></p>
<p>Here’s a variation on the same idea, clipped into a circle.</p>
<h2 id="section-5">6</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/006.png"></img></p>
<p>There are two new things happening here:</p>
<p>First, I moved back to the original line tapering streamline program like <a
href="#section-1">2</a>, but only generated starting points inside of a circle instead of the original square.</p>
<p>The other, more important (and subtler) point is this: I started plotting fixed points of the vector field. Those red dots represent locations in the field that have magnitude less than a certain threshold (which at this point was set really low). I originally thought it would be nice to show these inside of the shape (if you squint, you can see a couple of them inside the circular field). Lines close to red dots will always be very short, so it’s kind of fun to point out those locations.</p>
<p><strong>Note:</strong> When I say “fixed point threshold”, I mean the value under which a vector is considered to have 0 magnitude. Plotting only <em>actual</em> zeros would very likely show nothing <sup><a href="#section-a">a</a></sup>. This variable is played with a bit, so I want to clarify what I mean.</p>
<h2 id="section-6">7</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/007.png"></img></p>
<p>This is exactly the same thing as before with many more lines, generated from points inside of a set of randomly generated circles within the viewport. I may explore this further; I like the result looking back. At the time, it wasn’t what I was looking for. Onwards!</p>
<h2 id="section-7">8</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/008.png"></img></p>
<p>I noticed a little teardrop pattern in the shorter streamlines, so I generated some of those a little larger with a small drop shadow.</p>
<h2 id="section-8">9</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/009.png"></img></p>
<p>I made them bigger, but still didn’t love what I was seeing. At this point, I’d been seeing bunches of small red dots show up around the flow fields for a while, and started wondering about something…</p>
<h2 id="section-9">10</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/011.png"></img></p>
<p>At this point, I tried removing the streamline rendering altogether and instead focused my attentionon the fixed points. I upped the fixed point threshold (to include points with a higher magnitude) and just plotted those. I liked the emerging pattern. This was a big pivot point - everything from here on out is focused on these fixed points.</p>
<h2 id="section-10">11</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/012.png"></img></p>
<p>Another rendering of the same thing with an even higher threshold for fixed points.</p>
<h2 id="section-11">12</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/013.png"></img></p>
<p>The rendering each point was a little boring, so I decided to change it from a red dot to a black one with varying size. The size of each dot is proportional to the number of neighbors in the lattice that are also fixed points, which produces this little pattern.</p>
<h2 id="section-12">13</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/014.png"></img></p>
<p>Here’s another variation on the same thing; the size of each point is upped a bit, but the proportions remain the same. The circle fill is replaced with a stroke. This is pretty close to the final pattern I ended up with.</p>
<h2 id="section-13">14</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/015.png"></img></p>
<p>I spent a little while layering these flow field representations with progressively stricter fixed point thresholds. This one renders a bunch of them on top of one another, with a thin layer of a low-alpha white painted underneath it.</p>
<h2 id="section-14">15</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/016.png"></img></p>
<p>That looked muddy to me, so I started rendering something similar to <a
href="#section-12">13</a>, but constraining points to a central circle.</p>
<h2 id="section-15">16</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/017.png"></img></p>
<p>This is where things started to take shape. Instead of layering the series of plots on top of one another like in <a href="#section-14">16</a>, I gave the plots a small vertical offset, which produced a nice pattern.</p>
<h2 id="section-16">17</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/018.png"></img></p>
<p>The basis of this whole piece is an algorithm that smooths a two dimensional space by averaging neighors. Riffing on that idea, you can get an equally nice one dimensional smoothing algorithm by averaging the neighbors of a list of values.</p>
<p>That’s exactly what I did here: this smooth horizontal movement follows the path of a list of normally distributed values smoothed in exactly this way.</p>
<h2 id="section-17">18</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/019.png"></img></p>
<p>Does it look better as a square? I didn’t think so, but it was worth a shot.</p>
<h2 id="section-18">19</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/020.png"></img></p>
<p>I run a lot of things that are constrained inside of a shape through a simple rectangle subdivision algorithm to see how it turns out. I tried that here, but it didn’t add much to the overall composition.</p>
<h2 id="section-19">20</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/021.png"></img></p>
<p>Once again, I tried removing the vertical offsets. Looks a bit like a sequence of stamps to me.</p>
<h2 id="section-20">21</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/022.png"></img></p>
<p>Back to the vertical offsets, this time with circles scaled smaller. This was starting to look like a dead end, so I moved back to circular blotches.</p>
<h2 id="section-21">22</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/023.png"></img></p>
<p>This needed color! I’m still getting comfortable with color, but I watched a short video on HSV color theory which gave me a pretty good idea, which I used here. I’ll explain a bit.</p>
<p>Aaron Rutten <a href="https://youtu.be/8UGleDu1KEo?t=614">posted a YouTube video</a> a while ago about using HSV to shade and tint. He describes a system of shading which involves drawing a “curve” on a color triangle, starting with low saturation and high brightness (lights), curving over to high saturation and medium brightness (colorful), then back over to low saturation/low brightness (darks). This gave me an idea. Quadratic Bezier curves are defined with two end points and a control point; three points that can be tweaked to produce exactly the type of curve that Aaron mentions in his YouTube video. In order to produce a color for each successive blotch, I tried sampling this Bezier curve for a purple color, starting with a dark color and ending with a light one. I’ll refer to this as a “color Bezier” from now on.</p>
<h2 id="section-22">23</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/024.png"></img></p>
<p>This was nice, but still needed another element. Why not outline the circles behind each blotch? I tried it, and it really didn’t work.</p>
<h2 id="section-23">24</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/025.png"></img></p>
<p>Once again, I tried removing the vertical offsets. This looked to me a little like a texture from an old video game.</p>
<h2 id="section-24">25</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/026.png"></img></p>
<p>Next, I went back to something like <a href="#section-21">22</a>, with three tweaks:</p>
<ol style="list-style-type: decimal">
<li>Randomly sample the color Bezier for colors instead of interpolating along it for colors</li>
<li>Draw the blotches in reverse order, so the one nearest the top shows up layered above the ones below it.</li>
<li>Instead of only considering immediate neighbors to determine circle size, use the 5x5 grid centered at the point.</li>
</ol>
<p>In the final piece, (3) is still used. I think it produces a more interesting pattern.</p>
<h2 id="section-25">26</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/027.png"></img></p>
<p>I felt like this wasn’t going anywhere at this point and almost gave up on the whole thing. I thought hard about what this piece needed, and decided to try slicing the blotches randomly along their midpoint and layering them to try to introduce more variation. The color gradient is back; I didn’t like the random sampling of colors.</p>
<h2 id="section-26">27</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/028.png"></img></p>
<p>The last one was a little too chaotic. Instead, I tried only slicing near-vertically.</p>
<h2 id="section-27">28</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/029.png"></img></p>
<p>Tried using a different color to produce the color Bezier, and got this blueish one. I also moved back to the random slices. I liked the color of this.</p>
<h2 id="section-28">29</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/030.png"></img></p>
<p><strong>Yet again</strong> I removed the vertical offsets (or, at least lowered them). This produced a pretty cool gradient effect this time, but didn’t fill the space well.</p>
<h2 id="section-29">30</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/031.png"></img></p>
<p>At this point, I thought that something similar to <a href="#section-27">28</a> was close, but lacking something. I added a brushstroke pattern by dragging a set of points generated in a small circle across a randomly constructed Chaikin curve in the background. It looked really out of place, so I removed it.</p>
<h2 id="section-30">31</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/032.png"></img></p>
<p>I went back to something like <a href="#section-26">27</a>, but this time tried to produce some constrast by splitting the space into two separate vertical slices and rendering them with complementary color Beziers.</p>
<h2 id="section-31">32</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/033.png"></img></p>
<p>There’s a bit of a leap here. I didn’t like the last few images, and felt I was going in circles. Two things I wanted to improve were:</p>
<ol style="list-style-type: decimal">
<li>There was too much going on, and lots of details were being lost.</li>
<li>The colors really weren’t popping. This is <em>really</em> frustrating to me as someone learning to use color effectively!</li>
</ol>
<p>To address these issues, I made two significant changes. First, I reduced the number of iterations of blotches to only 5, instead of the previous 20ish (can’t remember the exact number), which dealt with the chaos and made the shapes pop a bit better. To deal with the color issue, I made a somewhat unintuitive change. I started generating the color Bezier from not one, but two, <em>completely random</em> hues, linearly interpolating between the two hues as the Bezier is constructed. Because I know the <em>system</em> works, I could sort of get away with leaving up the color generation to randomness and forget about hand picking them. A lot of the results around this time weren’t colored super well, but some, like this one, turned out quite nicely.</p>
<h2 id="section-32">33</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/034.png"></img></p>
<p>Here’s another iteration from around this time. I liked this one enough to share with others as a work in progress. I still thought it was missing something, but the colors were nice.</p>
<h2 id="section-33">34</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="70%" src="/images/blotch/035.png"></img></p>
<p>I hated the one background I tried back in <a href="#section-30">31</a>, but still thought the piece needed a background. After a while, I realized I aready had something that meshed well with the foreground: the original vector field! I started rendering each vector in the field with a small line width, which produced a nice, faint texture like I was looking for.</p>
<h2 id="section-34">35</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="80%" src="/images/blotch/036.png"></img></p>
<p>The border of the vector field was still a bunch of untouched, random vectors, which formed a noisy edge. To fix that up, I scaled the vector field to contain a few more lattice points outside of the viewport so the outer edges aren’t visible.</p>
<h2 id="final">36 (Final)</h2>
<p><img style="margin-left:auto; margin-right:auto; display:block;" width="80%" src="/images/blotch/037.png"></img></p>
<p>I liked the previous result, but it needed small tweaks. If you aren’t looking super carefully, these two images probably look identical. The changes made here are some minor tweaks to the fixed point thresholds, and a soft glow behind each cluster of circles, which helps the layers stand out. It’s worth mentioning that my process changed a little bit here. Instead of generating random images, I found my candidate and began re-generating the same exact image with tweaks that didn’t mess with the random generator. This has been a useful pattern for me, and I recommend giving it a try.</p>
<h2 id="in-conclusion">In conclusion…</h2>
<p>I didn’t have much of an end goal at the start of this process other than “make something cool using this data structure I have on hand.” Half of the process of generating art for me is taking every idea that pops up and running with it, and the other half is evaluating and criticizing the results that show up. The images shown here are only a small subset of the images generated along the way, but they serve as a good representation of the path the piece took from start to finish.</p>
<p>For more artwork like this, see <a href="/art.html">my art page</a> and follow me on <a href="twitter.com/bendotk">twitter</a> and <a href="instagram.com/bendotk">instagram</a>. “Blotch” is available as a one-of-a-kind print on <a href="https://bigcartel.com/bendotk">my shop</a>.</p>
<p>Finally, if you want to be alerted of new art for sale, feel free to sign up for my newsletter for the occasional update. I won’t spam you, I promise!</p>
<link href="//cdn-images.mailchimp.com/embedcode/horizontal-slim-10_7.css" rel="stylesheet" type="text/css">
<style type="text/css">
          #mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; width:100%;}
          /* Add your own MailChimp form style overrides in your site stylesheet or in this style block.
             We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */
  </style>
<div id="mc_embed_signup">
<form action="https://kovach.us12.list-manage.com/subscribe/post?u=126021f20d39147e20047aa2a&amp;id=f84bdb0f0d" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>
<div id="mc_embed_signup_scroll">
<!--<label for="mce-EMAIL">Subscribe to newsletter</label>--> <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required> <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->
<div style="position: absolute; left: -5000px;" aria-hidden="true">
<input type="text" name="b_126021f20d39147e20047aa2a_f84bdb0f0d" tabindex="-1" value="">
</div>
<div class="clear">
<input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button">
</div>
</div>
</form>
</div>
<p>Thanks for reading! I would be happy to expand on any individual points brought up during this whirlwind tour of my process. Please let me know if you’d like further clarification on anything in the comments below!</p>
<p>Ben</p>
<hr />
<p><span id="section-a"><strong>a</strong>. Unless, of course, we had infinite precision. Then we’d always show at least one. See <a href="https://www.youtube.com/watch?v=B4UGZEjG02s">the Hairy Ball Theorem</a>.</span></p>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Mon, 30 Apr 2018 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2018-04-30-blotch.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>
<item>
    <title>Generating artwork with Haskell</title>
    <link>http://kovach.me/posts/2018-03-07-generating-art.html</link>
    <description><![CDATA[
<div class="post_body">
  <h3 id="introduction">Introduction</h3>
<p>I’ve been creating <a href="https://en.wikipedia.org/wiki/Generative_art">generative art</a> consistently for about six months now. People are starting to ask what my stack looks like, and until now I haven’t had anything to point at; I’d like to change that today! I’m going to lay out my approach in this blog post, and we’ll put together something simple using the stack I’ve been using to generate art.</p>
<p>The long and short of it:</p>
<ul>
<li>I use Haskell</li>
<li>I use Cairo</li>
<li>It rocks!</li>
</ul>
<p>Here’s what we’ll be making:</p>
<p><img src="/images/final_colored_grid.png" width="100%" style="display:block;margin:auto"></img></p>
<p>I’m assuming some familiarity with Haskell in this post. I’m happy to help others learn, but won’t cover some of the minutiae here - my contact information is totally open if you’d like to reach out!</p>
<h3 id="getting-set-up">Getting set up</h3>
<p>You’ll need the following Haskell packages to run this script, if you want to follow along:</p>
<ul>
<li>cairo</li>
<li>colour</li>
<li>hsnoise</li>
<li>linear</li>
<li>MonadRandom</li>
<li>mtl</li>
<li>time</li>
<li>transformers</li>
</ul>
<p>You’ll also need <code>cairo</code> (the C library) installed on your system.</p>
<h3 id="background">Background</h3>
<h4 id="cairo">Cairo</h4>
<p><code>Cairo</code> is a 2D graphics library written in C. It’s pretty low-level, and handles things like drawing lines, rectangles or circles on a digital canvas. The specifics aren’t super important here, but it’s good to know what a <code>surface</code> and a <code>source</code> are.</p>
<p>For our purposes, we can consider a <code>surface</code> to be something like a canvas - a drawing surface. A <code>source</code> is a medium - the “digital paint” we use on the <code>surface</code>. In our case, this will only ever be a flat color. It can technically be a gradient, a texture, or even another <code>surface</code>.</p>
<h4 id="haskell">Haskell</h4>
<p>First off, I’ve been writing Haskell code for a long time. I’m very familiar with it, so it was very natural for me to try out this workflow. My choice to go in this direction is largely rooted in familiarity. I followed <a href="http://www.tylerlhobbs.com/">Tyler Hobbs</a>’s lead for a little while, writing Processing code through <a href="http://www.tylerlhobbs.com/writings/using-quil-for-artwork">Quil in Clojure</a>. It worked really well for a while, and I learned a lot of fundamentals regarding generative art (and Lisp!) this way. However, there were some things I just never got <em>quite</em> working, and I didn’t feel like I was as productive as I could be. So, I gave this new stack a shot.</p>
<p>Pretty immediately, I saw some improvements:</p>
<blockquote class="twitter-tweet" data-lang="en">
<p lang="en" dir="ltr">
I switched my genart stack to haskell/cairo a few days ago. Here's what changed:<br><br>- Deterministic random generation (seeding works across many libs)<br>- Image generation is super fast<br>- Image scaling is much easier<br>- Moving stuff around is slower, but usually correct
</p>
— Benjamin Kovach (<span class="citation">@BendotK</span>) <a href="https://twitter.com/BendotK/status/964186342564524032?ref_src=twsrc%5Etfw">February 15, 2018</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>For context, I never got seeding working in my old stack. In Haskell, pretty much every library involving randomness works with <code>StdGen</code> (which is part of the standard library, and has a nice API). Scaling images is just a matter of applying a scaling matrix to the whole image (we’ll see this later); it was a pretty manual process before. Changing code around is a bazillion times easier because I don’t really have to worry about messing my data types up - typically the compiler will yell until it becomes satisfied, at which point running the code does what I’d expect*.</p>
<p>* Not always, of course. But the adage of “if it compiles it works” does have some merit, especially in the world of generative art, where happy accidents are totally welcome.</p>
<p>I know that these things are totally <em>possible</em> with my old tech stack, I just didn’t find it intuitive for some reason. These things frustrated me to the point where I wanted to try something new.</p>
<h3 id="how-about-some-code">How about some code?</h3>
<p>Okay, first we’ll import all the libraries we need and set some GHC extensions:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE RecordWildCards  #-}</span>
<span class="ot">{-# LANGUAGE TypeApplications #-}</span>
<span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import           </span><span class="dt">Control.Arrow</span>
<span class="kw">import           </span><span class="dt">Control.Concurrent</span>
<span class="kw">import           </span><span class="dt">Control.Monad.Random</span>
<span class="kw">import           </span><span class="dt">Control.Monad.Reader</span>
<span class="kw">import           </span><span class="dt">Data.Colour.RGBSpace</span>
<span class="kw">import           </span><span class="dt">Data.Colour.RGBSpace.HSV</span>
<span class="kw">import           </span><span class="dt">Data.Foldable</span>            (for_)
<span class="kw">import           </span><span class="dt">Data.List</span>                (nub)
<span class="kw">import           </span><span class="dt">Data.Semigroup</span>           ((&lt;&gt;))
<span class="kw">import           </span><span class="dt">Data.Time.Clock.POSIX</span>
<span class="kw">import           </span><span class="dt">Graphics.Rendering.Cairo</span>
<span class="kw">import           </span><span class="dt">Linear.V2</span>
<span class="kw">import           </span><span class="dt">Linear.Vector</span>
<span class="kw">import qualified</span> <span class="dt">Numeric.Noise.Perlin</span>     <span class="kw">as</span> <span class="dt">P</span>
<span class="kw">import           </span><span class="dt">Text.Printf</span></code></pre></div>
<p>Now we can talk about our domain.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">World</span> <span class="fu">=</span> <span class="dt">World</span>
  {<span class="ot"> worldWidth  ::</span> <span class="dt">Int</span>
  ,<span class="ot"> worldHeight ::</span> <span class="dt">Int</span>
  ,<span class="ot"> worldSeed   ::</span> <span class="dt">Int</span>
  ,<span class="ot"> worldScale  ::</span> <span class="dt">Double</span>
  }

<span class="kw">type</span> <span class="dt">Generate</span> a <span class="fu">=</span> <span class="dt">RandT</span> <span class="dt">StdGen</span> (<span class="dt">ReaderT</span> <span class="dt">World</span> <span class="dt">Render</span>) a</code></pre></div>
<p>The <code>World</code> type just holds all of the information we may want to access at any point in our program.</p>
<p>An expression of type <code>Generate a</code> wraps three distinct types of functionality in the following layers. Working from the inside out…</p>
<ul>
<li><code>Render</code> is a type that ships with <code>cairo</code> - it is a newtype wrapper around <code>ReaderT Cairo</code>, where <code>Cairo</code> handles cairo context information. This isn’t super important to understand completely, but the key is that it allows us to interface with the cairo C library in a managed way.</li>
<li>One layer up, we’re working with <code>ReaderT World</code>, which will let us read environment information from the <code>World</code>.</li>
<li>The final layer to consider is the <code>RandT StdGen</code> layer from the <code>MonadRandom</code> package, which allows us to generate random values from a random number generator.</li>
</ul>
<p>The result is a type that allows all of those side effects to coexist, but effectively separates randomness and rendering. We can write functions of type <code>Render a</code> and <code>lift</code> them into the <code>Generate</code> context when needed, effectively separating random generation logic from rendering logic.</p>
<p>I’ve written a short helper function because <code>lift . lift</code> gets annoying to type after a while and doesn’t communicate intent very well:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- | Lift a Cairo action into a Generate action</span>
<span class="ot">cairo ::</span> <span class="dt">Render</span> a <span class="ot">-&gt;</span> <span class="dt">Generate</span> a
cairo <span class="fu">=</span> lift <span class="fu">.</span> lift</code></pre></div>
<p>Those are the basic building blocks that will let us interface with the libraries we need. There’s some boilerplate/setup we’ll need to run <code>Generate</code> expressions, so let’s get that out of the way and get something (nothing?) rendering:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">renderSketch ::</span> <span class="dt">Generate</span> ()
renderSketch <span class="fu">=</span> pure () <span class="co">-- no-op</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  seed <span class="ot">&lt;-</span> round <span class="fu">.</span> (<span class="fu">*</span><span class="dv">1000</span>) <span class="fu">&lt;$&gt;</span> getPOSIXTime
  <span class="kw">let</span>
    stdGen <span class="fu">=</span> mkStdGen seed
    width <span class="fu">=</span> <span class="dv">60</span>
    height <span class="fu">=</span> <span class="dv">60</span>
    scaleAmount <span class="fu">=</span> <span class="dv">20</span>

    scaledWidth <span class="fu">=</span> round <span class="fu">$</span> fromIntegral width <span class="fu">*</span> scaleAmount
    scaledHeight <span class="fu">=</span> round <span class="fu">$</span> fromIntegral height <span class="fu">*</span> scaleAmount

  surface <span class="ot">&lt;-</span> createImageSurface <span class="dt">FormatARGB32</span> scaledWidth scaledHeight
  <span class="co">-- The &quot;world&quot; thinks the width and height are the initial values, not scaled.</span>
  <span class="kw">let</span> world <span class="fu">=</span> <span class="dt">World</span> width height seed scaleAmount

  void
    <span class="fu">.</span> renderWith surface
    <span class="fu">.</span> flip runReaderT world
    <span class="fu">.</span> flip runRandT stdGen
    <span class="fu">$</span> <span class="kw">do</span>
      cairo <span class="fu">$</span> scale scaleAmount scaleAmount
      renderSketch

  putStrLn <span class="st">&quot;Generating art...&quot;</span>
  surfaceWriteToPNG surface
    <span class="fu">$</span> <span class="st">&quot;images/example_sketch/&quot;</span>
    <span class="fu">&lt;&gt;</span> show seed <span class="fu">&lt;&gt;</span> <span class="st">&quot;-&quot;</span> <span class="fu">&lt;&gt;</span> show (round<span class="ot"> scaleAmount ::</span> <span class="dt">Int</span>) <span class="fu">&lt;&gt;</span> <span class="st">&quot;.png&quot;</span>
  surfaceWriteToPNG surface <span class="st">&quot;images/example_sketch/latest.png&quot;</span></code></pre></div>
<p>Running this should produce two blank images, assuming the <code>images/example_sketch/</code> directory exists: <code>images/example_sketch/&lt;seed&gt;-20.png</code> and <code>images/example_sketch/latest.png</code>.</p>
<p>We’ll fill out <code>renderSketch</code> in a minute, but for now it’s just an art generator that does absolutely nothing. The rest of this is sort of important.</p>
<p>First, we grab the current <code>POSIX</code> time in milliseconds for use as our <code>StdGen</code> seed. This is important because it lets us re-use the seed to re-generate the artwork if we need/want to. Some initial variables are set, like the width, height, and how much we want to scale the final image. We create an image surface in <code>ARGB32</code> format to write to, and initialize our <code>World</code>. The next blob runs the <code>renderSketch</code> action with the program’s parameters we just set up. Before rendering the sketch, we can scale by a specified amount (in this case 20), which will effectively “blow up” the image without losing any quality if needed. The next two bits just write out the file to two locations: A timestamped one, which gives us the “seed” value, and a special file called <code>latest.png</code> that just holds the last image generated.</p>
<p>Just a couple of things about this:</p>
<ul>
<li>Because it’s so easy to up the <code>scaleAmount</code>, it makes sense to generate art at a comfortable size for speed purposes.</li>
<li>The <code>latest.png</code> file is super useful because it allows us to update a static file when the program is run. When I’m working on artwork, I automatically rebuild and regenerate these files on save. Having <code>latest.png</code> around means I can just leave my image viewer open and it will automatically refresh so I don’t have to jump around the file system.</li>
<li>Our program <em>thinks</em> that the image surface’s dimensions are <code>width x height</code>, but the actual size of the generated image will be scaled. This is really useful because it allows us to think in terms of a statically sized image, even when we might want to start blowing things up. I typically work with a 100x100 workspace, then blow up images as big as 10000x10000 when needed. Almost everything scales using <code>Double</code>s in the <code>cairo</code> API, so it’s really easy to get nice scaling properties while staying comfortable within a single coordinate space.</li>
</ul>
<h3 id="lets-render-something">Let’s render something</h3>
<p>The rest of this post will focus on filling out the <code>renderSketch</code> function, which will actually render something to our <code>Surface</code>.</p>
<p>Refresher time. We are trying to get here:</p>
<p><img src="/images/final_colored_grid.png" width="100%" style="display:block;margin:auto"></img></p>
<p>Generating the background would be a good start, so let’s do that.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">getSize ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Generate</span> (a, a)
getSize <span class="fu">=</span> <span class="kw">do</span>
  (w, h) <span class="ot">&lt;-</span> asks (worldWidth <span class="fu">&amp;&amp;&amp;</span> worldHeight)
  pure (fromIntegral w, fromIntegral h)

<span class="ot">fillScreen ::</span> (<span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Render</span> a) <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Generate</span> ()
fillScreen color opacity <span class="fu">=</span> <span class="kw">do</span>
  (w, h) <span class="ot">&lt;-</span> getSize <span class="fu">@</span><span class="dt">Double</span>
  cairo <span class="fu">$</span> <span class="kw">do</span>
    rectangle <span class="dv">0</span> <span class="dv">0</span> w h
    color opacity <span class="fu">*&gt;</span> fill

<span class="ot">hsva ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Render</span> ()
hsva h s v <span class="fu">=</span> setSourceRGBA channelRed channelGreen channelBlue
 <span class="kw">where</span> <span class="dt">RGB</span>{<span class="fu">..</span>} <span class="fu">=</span> hsv h s v

<span class="ot">eggshell ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Render</span> ()
eggshell <span class="fu">=</span> hsva <span class="dv">71</span> <span class="fl">0.13</span> <span class="fl">0.96</span>

<span class="ot">renderSketch ::</span> <span class="dt">Generate</span> ()
renderSketch <span class="fu">=</span> <span class="kw">do</span>
  fillScreen eggshell <span class="dv">1</span></code></pre></div>
<p>Okay that’s a bit more code, sorry. Still have a bit to set up because <code>cairo</code> <em>is</em> a pretty low level library and we’re building from scratch.</p>
<p>In a nutshell:</p>
<ul>
<li><code>getSize</code> gets the dimensions of the surface from the world, and converts them to a specified numeric type.</li>
<li><code>fillScreen</code> takes a color and an <code>alpha</code> value (an opacity param between 0 and 1) and fills the screen with that color.</li>
<li><code>hsva</code> lets us use the HSV color space instead of RGB which is <a href="https://www.kirupa.com/design/little_about_color_hsv_rgb.htm">much more in-line with how we think about color</a>. It sets the <code>source</code> (paint) to this color for the next drawing operation.</li>
<li><code>eggshell</code> is the color we want to fill the screen with.</li>
<li><code>renderSketch</code> now fills the screen with fully opaque <code>eggshell</code>.</li>
</ul>
<p>I consider <code>Double -&gt; Render a</code> to be the type of a <code>Color</code>, which might seem weird. But I want to be able to control opacity, and don’t consider that a part of a color’s definition. However, it’s a tuneable attribute of color, so this representation works nicely.</p>
<p>Anyway, when we run this script, we should see a completely <code>eggshell</code> square:</p>
<p><img src="/images/background.png" width="100%" style="display:block;margin:auto"></img></p>
<h3 id="rendering-something-neat">Rendering something neat</h3>
<p>Progress! The next step is to draw a grid of quadrilaterals. Notably, we’ll need a concrete notion of two things:</p>
<ul>
<li>Points on a grid</li>
<li>Quadrilaterals</li>
</ul>
<p>We’ll start by generating perfect squares, and then add some variance to those squares later.</p>
<h4 id="points-on-a-grid">Points on a grid</h4>
<p>Well, first we need the idea of a <code>Point</code> in 2d space. Fortunately the <code>linear</code> library comes in handy here with its <code>V2</code> type. <code>V2 Double</code> will do (a two dimensional vector of <code>Double</code>s).</p>
<h4 id="quadrilaterals">Quadrilaterals</h4>
<p>For this program, a <code>Quad</code> (quadrilateral) is well-represented by four points in space. I’ve arbitrarily chosen them to be in counter-clockwise order, starting from the top left:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">--  a---d</span>
<span class="co">--  |   |</span>
<span class="co">--  b---c</span>
<span class="kw">data</span> <span class="dt">Quad</span> <span class="fu">=</span> <span class="dt">Quad</span>
  {<span class="ot"> quadA ::</span> <span class="dt">V2</span> <span class="dt">Double</span>
  ,<span class="ot"> quadB ::</span> <span class="dt">V2</span> <span class="dt">Double</span>
  ,<span class="ot"> quadC ::</span> <span class="dt">V2</span> <span class="dt">Double</span>
  ,<span class="ot"> quadD ::</span> <span class="dt">V2</span> <span class="dt">Double</span>
  } <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</code></pre></div>
<p>* Note: I totally draw little ascii drawings like this in my comments all the time. It helps!</p>
<p>A simple way to think about points on a grid is a <code>V2 Int</code> - that is, a vector with integral coordinates. Let’s go that route for now, and generate some <code>Quad</code>s!</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">fromIntegralVector ::</span> <span class="dt">V2</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">V2</span> <span class="dt">Double</span>
fromIntegralVector (<span class="dt">V2</span> x y) <span class="fu">=</span> <span class="dt">V2</span> (fromIntegral x) (fromIntegral y)

<span class="ot">genQuadGrid ::</span> <span class="dt">Generate</span> [<span class="dt">Quad</span>]
genQuadGrid <span class="fu">=</span> <span class="kw">do</span>
  (w, h) <span class="ot">&lt;-</span> getSize <span class="fu">@</span><span class="dt">Int</span>
  vectors <span class="ot">&lt;-</span> replicateM <span class="dv">800</span> <span class="fu">$</span> <span class="kw">do</span>
    v <span class="ot">&lt;-</span> <span class="dt">V2</span> <span class="fu">&lt;$&gt;</span> getRandomR (<span class="dv">3</span>, w <span class="ot">`div`</span> <span class="dv">2</span> <span class="fu">-</span> <span class="dv">3</span>) <span class="fu">&lt;*&gt;</span> getRandomR (<span class="dv">3</span>, h <span class="ot">`div`</span> <span class="dv">2</span> <span class="fu">-</span> <span class="dv">3</span>)
    pure <span class="fu">$</span> v <span class="fu">^*</span> <span class="dv">2</span>
  pure <span class="fu">.</span> nub <span class="fu">.</span> flip map vectors <span class="fu">$</span> \v <span class="ot">-&gt;</span>
    <span class="kw">let</span> v&#39; <span class="fu">=</span> fromIntegralVector v
    <span class="kw">in</span> <span class="dt">Quad</span> v&#39; (v&#39; <span class="fu">^+^</span> <span class="dt">V2</span> <span class="dv">0</span> <span class="fl">1.5</span>) (v&#39; <span class="fu">^+^</span> <span class="dt">V2</span> <span class="fl">1.5</span> <span class="fl">1.5</span>) (v&#39; <span class="fu">^+^</span> <span class="dt">V2</span> <span class="fl">1.5</span> <span class="dv">0</span>)</code></pre></div>
<p>We produce a grid of quads by:</p>
<ul>
<li>Grabbing the dimensions of our surface as <code>Int</code>s</li>
<li>Getting 800 random integral points in the integer grid (We multiply by two here for slightly bigger shapes, and trim off a margin*)</li>
<li>Adding the appropriate offsets to them with the <code>^+^</code> (vector addition) operator to produce <code>Quad</code> coordinates around the specified start point</li>
<li>Filtering out duplicates.</li>
</ul>
<p>* Another way of dealing with this would be to double the scaling, and half the width and height, and just use any integer coordinates. But this works too and lets us adjust the margins a little better (with 3 padding vs 2 or 4)</p>
<p>Armed with this, we need to be able to render the <code>Quad</code>s by drawing the path around them:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">renderClosedPath ::</span> [<span class="dt">V2</span> <span class="dt">Double</span>] <span class="ot">-&gt;</span> <span class="dt">Render</span> ()
renderClosedPath (<span class="dt">V2</span> x y<span class="fu">:</span>vs) <span class="fu">=</span> <span class="kw">do</span>
  newPath
  moveTo x y
  for_ vs <span class="fu">$</span> \v <span class="ot">-&gt;</span> <span class="kw">let</span> <span class="dt">V2</span> x&#39; y&#39; <span class="fu">=</span> v <span class="kw">in</span> lineTo x&#39; y&#39;
  closePath
renderClosedPath [] <span class="fu">=</span> pure ()

<span class="ot">renderQuad ::</span> <span class="dt">Quad</span> <span class="ot">-&gt;</span> <span class="dt">Render</span> ()
renderQuad <span class="dt">Quad</span>{<span class="fu">..</span>} <span class="fu">=</span> renderClosedPath [quadA, quadB, quadC, quadD]</code></pre></div>
<p>Then we can render the grid:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">darkGunmetal ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Render</span> ()
darkGunmetal <span class="fu">=</span> hsva <span class="dv">170</span> <span class="fl">0.30</span> <span class="fl">0.16</span>

<span class="ot">renderSketch ::</span> <span class="dt">Generate</span> ()
renderSketch <span class="fu">=</span> <span class="kw">do</span>
  fillScreen eggshell <span class="dv">1</span>

  cairo <span class="fu">$</span> setLineWidth <span class="fl">0.15</span>

  quads <span class="ot">&lt;-</span> genQuadGrid

  cairo <span class="fu">$</span> for_ quads <span class="fu">$</span> \quad <span class="ot">-&gt;</span> <span class="kw">do</span>
    renderQuad quad
    darkGunmetal <span class="dv">1</span> <span class="fu">*&gt;</span> stroke</code></pre></div>
<p>Voila:</p>
<p><img src="/images/grid.png" width="100%" style="display:block;margin:auto"></img></p>
<h3 id="more-variance">More Variance</h3>
<p>Let’s add some variance. First, we’ll add some Perlin noise to the quad coordinates: A super easy way to get cool looking, smooth movement.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">quadAddNoise ::</span> <span class="dt">Quad</span> <span class="ot">-&gt;</span> <span class="dt">Generate</span> <span class="dt">Quad</span>
quadAddNoise <span class="dt">Quad</span>{<span class="fu">..</span>} <span class="fu">=</span> <span class="kw">do</span>
  perlinSeed <span class="ot">&lt;-</span> fromIntegral <span class="fu">&lt;$&gt;</span> asks worldSeed

  <span class="kw">let</span>
    perlinOctaves <span class="fu">=</span> <span class="dv">5</span>
    perlinScale <span class="fu">=</span> <span class="fl">0.1</span>
    perlinPersistance <span class="fu">=</span> <span class="fl">0.5</span>
    perlinNoise
      <span class="fu">=</span> P.perlin (round perlinSeed) perlinOctaves perlinScale perlinPersistance
    perlin2d (<span class="dt">V2</span> x y)
      <span class="fu">=</span> P.noiseValue perlinNoise (x <span class="fu">+</span> perlinSeed, y <span class="fu">+</span> perlinSeed, perlinSeed) <span class="fu">-</span> <span class="fl">0.5</span>
    addNoise v <span class="fu">=</span> <span class="kw">let</span> noise <span class="fu">=</span> perlin2d v <span class="kw">in</span> v <span class="fu">^+^</span> <span class="dt">V2</span> (noise <span class="fu">/</span> <span class="dv">5</span>) (noise <span class="fu">/</span> <span class="dv">8</span>)

  pure <span class="fu">$</span> <span class="dt">Quad</span>
    (addNoise quadA)
    (addNoise quadB)
    (addNoise quadC)
    (addNoise quadD)</code></pre></div>
<p>A large chunk of this is just interfacing with the <code>hsnoise</code> library. There are some parameters we need to provide to <code>P.perlin</code> that you can largely ignore. Check out <a href="http://flafla2.github.io/2014/08/09/perlinnoise.html">Adrian’s Soapbox</a> for a good explanation, if you wish. The key piece here is that the <code>worldSeed</code> is added to the <code>x</code> and <code>y</code> values here when passed into the <code>perlinNoise</code> function. If this was not added, we would see the same variance every time. The short way of saying this is that Perlin noise is deterministic; we can introduce variance by offsetting by our (varying) seed.</p>
<p>The attentive reader might recognize that the only reason we’re really in <code>Generate</code> here is to get access to the size of the surface. This could also have been written inside the <code>ReaderT World</code> layer just as well and <code>lift</code>ed into the <code>Generate</code> context later.</p>
<p>Anyway, we generate noise at each of the four quad points, subtract 0.5 from it to allow us to move up and to the left, then add a scaled version of it to each of the four quad points.</p>
<p>Applying it, we get a some wiggly quadrilaterals:</p>
<p><img src="/images/noisy_quads.png" width="100%" style="display:block;margin:auto"></img></p>
<h3 id="even-more-variance">Even More Variance</h3>
<p>We’re very nearly there, but still missing a couple of points of variance:</p>
<ol style="list-style-type: decimal">
<li>We’re not filling any squares, we’re just stroking them all</li>
<li>We’re only using one color (<code>darkGunmetal</code>), and we want to vary the colors.</li>
</ol>
<p>This is best illustrated with code. <code>renderSketch</code> becomes:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">teaGreen ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Render</span> ()
teaGreen <span class="fu">=</span> hsva <span class="dv">81</span> <span class="fl">0.25</span> <span class="fl">0.94</span>

<span class="ot">vividTangerine ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Render</span> ()
vividTangerine <span class="fu">=</span> hsva <span class="dv">11</span> <span class="fl">0.40</span> <span class="fl">0.92</span>

<span class="ot">englishVermillion ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Render</span> ()
englishVermillion <span class="fu">=</span> hsva <span class="dv">355</span> <span class="fl">0.68</span> <span class="fl">0.84</span>

<span class="ot">renderSketch ::</span> <span class="dt">Generate</span> ()
renderSketch <span class="fu">=</span> <span class="kw">do</span>
  fillScreen eggshell <span class="dv">1</span>

  cairo <span class="fu">$</span> setLineWidth <span class="fl">0.15</span>

  quads <span class="ot">&lt;-</span> genQuadGrid
  noisyQuads <span class="ot">&lt;-</span> traverse quadAddNoise quads

  for_ noisyQuads <span class="fu">$</span> \quad <span class="ot">-&gt;</span> <span class="kw">do</span>
    strokeOrFill <span class="ot">&lt;-</span> weighted [(fill, <span class="fl">0.4</span>), (stroke, <span class="fl">0.6</span>)]
    color <span class="ot">&lt;-</span> uniform
       [ teaGreen
       , vividTangerine
       , englishVermillion
       , darkGunmetal
       ]
    cairo <span class="fu">$</span> <span class="kw">do</span>
      renderQuad quad
      color <span class="dv">1</span> <span class="fu">*&gt;</span> strokeOrFill</code></pre></div>
<p>We use two functions from <code>MonadRandom</code> here:</p>
<ul>
<li><code>weighted</code> grabs a value out of a list with the given weight. We will <code>fill</code> 40% of the time and <code>stroke</code> 60% of the time.</li>
<li><code>uniform</code> assigns the same weight to every value in a list and does the same thing. All four colors have an equal chance of being chosen.</li>
</ul>
<p>Rendering has been lifted with <code>cairo</code> into it’s own block inside the <code>for_</code>, instead of wrapping the whole thing, to allow for random generation within the loop.</p>
<p>Kablam! Art!</p>
<p><img src="/images/final_colored_grid.png" width="100%" style="display:block;margin:auto"></img></p>
<h3 id="concluding-remarks">Concluding remarks</h3>
<h4 id="seeding">Seeding</h4>
<p>I used this seed to generate this final image: <code>1520476193207</code>. If you’ve been following along, try fixing the seed and generating it on your own!</p>
<h4 id="modifying-non-random-variables">Modifying non-random variables</h4>
<p>One thing I haven’t shown off is that you can screw around with anything inside a <code>Render</code> block without affecting the RNG. Try changing the colors around and running this program with a seed you’ve previously used. You’ll get the same structure and distribution of color, but different colors! You can also change things like the scaling of the Perlin noise, or even screw around with the general idea of rendering a quadrilateral, all while retaining the same randomness properties.</p>
<h4 id="using-other-random-libraries">Using other random libraries</h4>
<p>It’s not too hard to hook up <code>random-fu</code> to this little framework, which extends its capabilities with e.g. Normally distributed random variables. You can also use other random number generators, as detailed in <a href="http://www.kovach.me/posts/2017-01-30-haskell-bits-randomness.html">my blog post on randomness in Haskell</a>.</p>
<h4 id="where-did-the-colors-come-from">Where did the colors come from?</h4>
<p><a href="https://coolors.co">coolors</a>, a handy website. <a href="https://coolors.co/eef4d4-daefb3-ea9e8d-d64550-1c2826">Here’s a link to the palette we used</a>.</p>
<h4 id="acknowledgements">Acknowledgements</h4>
<p>A number of people have been super helpful and inspirational to me. To plug a few other generative artists doing cool stuff, check out the work of <a href="http://www.tylerlhobbs.com/">Tyler Hobbs</a>, <a href="http://inconvergent.net">Anders Hoff (inconvergent)</a>, and <a href="http://manoloide.com/">Manoloide</a>. Visit <a href="https://reddit.com/r/generative">r/generative</a> for even more good stuff.</p>
<p>Also a huge thanks to <a href="https://hackage.haskell.org/package/cairo">the Gtk2Hs team</a> for the cairo bindings, wihout which all of this would not be possible.</p>
<h4 id="where-can-i-see-your-work">Where can I see your work?</h4>
<p>I’ve just recently set up a bigcartel shop here, where you can view and purchase my work: <a href="https://bendotk.bigcartel.com">bigcartel link</a>. You can also follow me on <a href="https://instagram.com/bendotk">instagram</a> or <a href="https://instagram.com/bendotk">twitter</a>, where I’ve been posting frequent updates.</p>
<p>I hope this post provided a glimpse into my general artistic process. As always, I’m happy to answer any questions in the comments or on twitter!</p>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Wed, 07 Mar 2018 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2018-03-07-generating-art.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>
<item>
    <title>Haskell Bits #6 - A Guide to Mutable References</title>
    <link>http://kovach.me/posts/2017-06-22-mutable-references.html</link>
    <description><![CDATA[
<div class="post_body">
  <p>There are quite a few ways to store mutable data in Haskell. Let’s talk about some of them! Specifically, we will focus on mutable containers that store a single value that can be modified by one or more threads at any given time.</p>
<p>I’m not going to go into a ton of detail here - I just want to give an overview. I have provided links to the documentation and other resources at the end of each section for further reading.</p>
<h2 id="ioref">IORef</h2>
<p><img src="/images/HaskellRefs/ioref.png" height="400" style="display:block;margin:auto"></img></p>
<p>First up is <code>IORef</code>, the simplest of all containers. It is a sectioned off bit of mutable memory for any number of threads to read/modify willy-nilly.</p>
<p>We can read this diagram as follows:</p>
<ul>
<li>The whole action takes place in the <code>IO</code> monad/context.</li>
<li>A new <code>IORef</code> was created in <code>IO</code> somewhere and provided to two threads: <code>t1</code> and <code>t2</code>.</li>
<li>At some point, <code>t1</code> writes a value to the <code>IORef</code> using <code>writeIORef :: IORef a -&gt; a -&gt; IO a</code></li>
<li>A little later, <code>t2</code> writes a value to the same <code>IORef</code>.</li>
<li>Finally, <code>t1</code> reads the <code>IORef</code> using <code>readIORef :: IORef a -&gt; IO a</code></li>
</ul>
<p>The following diagrams will follow the same general struture: time increases as we move downwards along a thread, and certain actions are taken within those threads.</p>
<p><code>IORef</code>s are not very safe. They are highly succeptible to race conditions and other unintended behavior, and should be used with caution. For example, in our diagram: <code>t2</code> modifies the <code>IORef</code> after <code>t1</code> wrote to it - <code>t1</code> probably expected that <code>readIORef</code> would return whatever it placed there. That is not the case, because <code>t2</code> modified it between the write and read steps of <code>t1</code>.</p>
<ul>
<li><a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-IORef.html">Documentation for Data.IORef</a></li>
</ul>
<h2 id="mvar">MVar</h2>
<p><img src="/images/HaskellRefs/mvar.png" height="400" style="display:block;margin:auto"></img></p>
<p><code>MVar</code>s represent a location in memory that holds a value as well. However, <code>MVar</code>s come with the guarantee that no two threads are modifying a variable at the same time.</p>
<p>An <code>MVar</code> is either empty or full of an <code>a</code>. When we try to <code>takeMVar</code> on an empty <code>MVar</code>, the current thread blocks (indicated by a black line) until a value is put back into the <code>MVar</code>. <code>GHC</code>’s runtime is pretty good at determining when a thread is blocked indefinitely on an <code>MVar</code> read, so we don’t often have to worry about a thread hanging due to a bad program (for too long).</p>
<p><code>MVar</code>s are still succeptible to race conditions, but are great for simple concurrent tasks like synchronization and basic communication between threads.</p>
<ul>
<li><a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Control-Concurrent-MVar.html">Documentation for Control.Concurrent.MVar</a>=</li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000929/ch07.html">More on MVars</a></li>
</ul>
<h2 id="tvar">TVar</h2>
<p><img src="/images/HaskellRefs/tvar.png" height="400" style="display:block;margin:auto"></img></p>
<p><code>TVar</code>s solve a different problem. They are associated with a mechanism called Software Transactional Memory - <code>STM</code> - - a construct that allows us to compose primitive operations and run them sequentially as a <em>transaction</em>. Think database transaction: if one <code>STM</code> action in a chain fails, all previous actions taken in that chain are rolled back accordingly.</p>
<p><code>TVar</code>s have a similar API to <code>MVar</code>, with one major difference: They can’t ever be empty. <code>TVar</code>s can only be used in a singular thread, which is commonly executed as an atomic transaction using the function <code>atomically :: STM a -&gt; IO ()</code>.</p>
<p><code>STM</code> provides a bunch of very useful primitives for working with transactions, and is worth exploring:</p>
<ul>
<li><a href="https://hackage.haskell.org/package/stm-2.4.4.1/docs/Control-Monad-STM.html">Documentation for Control.Monad.STM</a></li>
<li><a href="https://hackage.haskell.org/package/stm-2.4.4.1/docs/Control-Concurrent-STM-TVar.html">Documentation for Control.Concurrent.STM.TVar</a></li>
<li><a href="http://chimera.labs.oreilly.com/books/1230000000929/ch10.html">More on TVars and STM</a></li>
</ul>
<h2 id="tmvar">TMVar</h2>
<p><img src="/images/HaskellRefs/tmvar.png" height="400" style="display:block;margin:auto"></img></p>
<p>This diagram should look pretty familiar! <code>TMVar</code>s are a mash between <code>TVar</code>s and <code>MVar</code>s, as you might expect from its name. They can be composed transactionally just like <code>TVar</code>s, but can also be empty, and shared across many threads.</p>
<p>Since all of these <code>TMVar</code> actions live in <code>STM</code>, they can be run in the same manner as when we use regular <code>TVar</code>s.</p>
<ul>
<li><a href="https://hackage.haskell.org/package/stm-2.4.4.1/docs/Control-Concurrent-STM-TMVar.html">Documentation for Control.Concurrent.STM.TMVar</a></li>
</ul>
<h2 id="stref">STRef</h2>
<p><img src="/images/HaskellRefs/stref.png" height="400" style="display:block;margin:auto"></img></p>
<p><code>STRef</code>s are a completely different type of mutable container. They are restricted to a single thread, much like <code>TVar</code>s, but <em>guarantee</em> that they never escape (they are thread-local). They live in a context called <code>ST</code>, indicating a stateful thread.</p>
<p>The <code>s</code> value in the type of <code>ST</code> and <code>STRef</code> is a reference to the thread that the <code>ST</code> computation is allowed to access.</p>
<p><code>ST</code> and <code>STRef</code>s are mainly used to gain performance when you need to be closer to memory, but don’t want to give up safety.</p>
<ul>
<li><a href="https://wiki.haskell.org/Monad/ST">More on ST/STRef</a></li>
<li><a href="https://hackage.haskell.org/package/base-4.9.1.0/docs/Data-STRef.html">Documentation for Data.STRef</a></li>
</ul>
<p>Til next time!</p>
<p>Ben</p>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Thu, 22 Jun 2017 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2017-06-22-mutable-references.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>
<item>
    <title>Haskell Bits #5 - Easily working with JSON</title>
    <link>http://kovach.me/posts/2017-05-11-easy-json.html</link>
    <description><![CDATA[
<div class="post_body">
  <p>JSON is ubiquitous nowadays, perhaps most importantly for web APIs. We’ll probably need to interact with (or build) one of those at some point, so we must be able to handle JSON in Haskell, right?</p>
<p>Yep - also it’s pretty easy. Let’s talk about it! First, some boilerplate to get out of the way:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>
<span class="ot">{-# LANGUAGE DeriveGeneric #-}</span>
<span class="ot">{-# LANGUAGE TemplateHaskell #-}</span>
<span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span>
<span class="ot">{-# LANGUAGE FunctionalDependencies #-}</span>

<span class="kw">import </span><span class="dt">Control.Lens</span> ((^.), (^?))
<span class="kw">import </span><span class="dt">Control.Lens.TH</span>
<span class="kw">import </span><span class="dt">Data.Aeson.Lens</span>
<span class="kw">import </span><span class="dt">Data.Aeson</span>
<span class="kw">import </span><span class="dt">Data.Aeson.Types</span>
<span class="kw">import </span><span class="dt">Data.Aeson.TH</span>
<span class="kw">import qualified</span> <span class="dt">Data.ByteString.Lazy.Char8</span> <span class="kw">as</span> <span class="dt">BL</span>
<span class="kw">import qualified</span> <span class="dt">Data.Text</span> <span class="kw">as</span> <span class="dt">T</span>
<span class="kw">import </span><span class="dt">GHC.Generics</span></code></pre></div>
<p>Try not to get too overwhelmed with that giant chunk of imports and extensions. Most of it is only for the template haskell we’ll be using later. The important bit for now is <code>Data.Aeson</code> from the <code>aeson</code> package, which allows us to seamlessly work with JSON. We’ll need <code>lens</code> and <code>lens-aeson</code> packages later on.</p>
<p>Let’s pretend we have some API we’re building and want to generate a static blob of JSON for the front page. How about this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">index<span class="ot"> ::</span> <span class="dt">Value</span>
index <span class="fu">=</span> object
    [ <span class="st">&quot;message&quot;</span> <span class="fu">.=</span> <span class="dt">String</span> <span class="st">&quot;Congrats!&quot;</span>
    , <span class="st">&quot;status&quot;</span> <span class="fu">.=</span> <span class="dt">String</span> <span class="st">&quot;YOU_GOT_HERE_SO_OBVIOUSLY_SUCCESSFUL&quot;</span>
    , <span class="st">&quot;metadata&quot;</span> <span class="fu">.=</span> object [
        <span class="st">&quot;version&quot;</span> <span class="fu">.=</span> <span class="dt">Number</span> <span class="dv">9</span>
      ]
    ]</code></pre></div>
<p><code>Value</code> is the type of JSON values in Haskell. We can build up an object using the <code>object</code> functions, and a mapping from keys to <code>Value</code>s, generated by <code>String</code>, <code>Number</code>, and other functions.</p>
<p>We can encode a <code>Value</code> with <code>encode</code>. It produces a lazy <code>ByteString</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">BL.putStrLn <span class="fu">$</span> encode index
<span class="co">-- { &quot;status&quot;:&quot;YOU_GOT_HERE_SO_OBVIOUSLY_SUCCESSFUL&quot;,&quot;metadata&quot;:{&quot;version&quot;:9},&quot;message&quot;:&quot;Congrats!&quot;}</span></code></pre></div>
<p>Next up, I’d like to show how a client might interact with this thing. If they have the unpacked <code>Value</code>, they can access the value at the <code>message</code> key like this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">index <span class="fu">^.</span> key <span class="st">&quot;message&quot;</span> <span class="fu">.</span> _<span class="dt">String</span>
<span class="co">-- &quot;Congrats!&quot;</span></code></pre></div>
<p>What’s even better is that we don’t even need to unpack the <code>Value</code>! We can operate directly on the encoded JSON:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">encode index <span class="fu">^.</span> key <span class="st">&quot;message&quot;</span> <span class="fu">.</span> _<span class="dt">String</span>
<span class="co">-- &quot;Congrats!&quot;</span></code></pre></div>
<p>We can dig into the nested fields safely using <code>^?</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">index <span class="fu">^?</span> key <span class="st">&quot;metadata&quot;</span> <span class="fu">.</span> key <span class="st">&quot;app_version&quot;</span> <span class="fu">.</span> _<span class="dt">Number</span>
<span class="co">-- Just 9.0</span></code></pre></div>
<p>All <code>Lens</code> idioms apply. It’s easy to get, set, or modify arbitrary fields of JSON objects this way.</p>
<p>Let’s say we want to start building up our application and require more type safety. <code>aeson</code> makes it easy to generate encoding and decoding mechanisms for your data types. For instance, we can define the following two types, generate lenses (via <code>makeFields</code>) and <code>ToJSON</code> and <code>FromJSON</code> instances using a bit of template haskell:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Metadata</span> <span class="fu">=</span> <span class="dt">Metadata</span>
    { _<span class="ot">metadataAppVersion ::</span> <span class="dt">Int</span>
    } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>, <span class="dt">Generic</span>)

<span class="fu">$</span>(deriveJSON
    defaultOptions
        { fieldLabelModifier <span class="fu">=</span> camelTo2 <span class="ch">&#39;_&#39;</span> <span class="fu">.</span> drop (T.length <span class="st">&quot;_metadata&quot;</span>)
        } <span class="ch">&#39;&#39;</span><span class="dt">Metadata</span>)
<span class="fu">$</span>(makeFields <span class="ch">&#39;&#39;</span><span class="dt">Metadata</span>)

<span class="kw">data</span> <span class="dt">IndexResponse</span> <span class="fu">=</span> <span class="dt">IndexResponse</span>
    { _<span class="ot">indexResponseMessage ::</span> <span class="dt">T.Text</span>
    , _<span class="ot">indexResponseStatus ::</span> <span class="dt">T.Text</span>
    , _<span class="ot">indexResponseMetadata ::</span> <span class="dt">Metadata</span>
    } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>, <span class="dt">Generic</span>)

<span class="fu">$</span>(deriveJSON
    defaultOptions
        { fieldLabelModifier <span class="fu">=</span> camelTo2 <span class="ch">&#39;_&#39;</span> <span class="fu">.</span> drop (T.length <span class="st">&quot;_indexResponse&quot;</span>)
        } <span class="ch">&#39;&#39;</span><span class="dt">IndexResponse</span>)
<span class="fu">$</span>(makeFields <span class="ch">&#39;&#39;</span><span class="dt">IndexResponse</span>)</code></pre></div>
<p>Here’s the same <code>index</code> structure, now typed more explicitly:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">indexResponse ::</span> <span class="dt">IndexResponse</span>
indexResponse <span class="fu">=</span> <span class="dt">IndexResponse</span>
    <span class="st">&quot;Congrats!&quot;</span>
    <span class="st">&quot;YOU_GOT_HERE_SO_OBVIOUSLY_SUCCESSFUL&quot;</span>
    (<span class="dt">Metadata</span> <span class="dv">9</span>)</code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">BL.putStrLn <span class="fu">$</span> encode indexResponse
<span class="co">-- {&quot;message&quot;:&quot;Congrats!&quot;,&quot;status&quot;:&quot;YOU_GOT_HERE_SO_OBVIOUSLY_SUCCESSFUL&quot;,&quot;metadata&quot;:{&quot;app_version&quot;:9}}</span></code></pre></div>
<p>Note that the <code>appVersion</code> field gets automatically converted from <code>camelCase</code> to <code>snake_case</code> with the <code>camelTo2</code> option from <code>Data.Aeson.Types</code>. Handy!</p>
<p>We can check that encoding and decoding works, and use more type-safe lenses (in this case, <code>message</code>, which was generated by <code>makeFields</code>):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(decode (encode indexResponse)<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">IndexResponse</span>) <span class="fu">^.</span> _<span class="dt">Just</span> <span class="fu">.</span> message
<span class="co">-- &quot;Congrats!&quot;</span></code></pre></div>
<p>As you can see, dealing with JSON in Haskell is a breeze! What other tips and tricks do you use when dealing with JSON (de)serialization (in Haskell or otherwise)?</p>
<p>Until next time,</p>
<p>Ben</p>
<p>You can read more about <code>aeson</code> and <code>lens-aeson</code> in the docs:</p>
<ul>
<li><a href="https://www.stackage.org/lts-8.13/package/aeson-1.0.2.1">aeson</a></li>
<li><a href="https://www.stackage.org/lts-8.13/package/lens-aeson-1.0.1">lens-aeson</a></li>
</ul>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Thu, 11 May 2017 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2017-05-11-easy-json.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>
<item>
    <title>Haskell Bits #4 - Environment Variables</title>
    <link>http://kovach.me/posts/2017-02-22-environment-variables.html</link>
    <description><![CDATA[
<div class="post_body">
  <p>It’s likely that you’ll have to deal with environment variables at some point. What I’ll describe here is a kicking-off point for robust environment handling with little overhead. We’ll build a tiny library you can drop into any application that will make dealing with environment variables for configuration a lot easier. Then I’ll show some example usage.</p>
<p>This is all built on top of <code>System.Environment</code>, which isn’t super nice to use in its raw form. In particular, there no implicit facilities for type coercion, fallback values, or composability. We’ll address those problems here.</p>
<p>You’ll need the following libraries to get run the code in this post: <code>transformers</code>, <code>split</code> and <code>safe</code>.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span>

<span class="kw">import </span><span class="dt">System.Environment</span> <span class="kw">hiding</span> (getEnv)
<span class="kw">import </span><span class="dt">Control.Monad.Trans.Maybe</span>
<span class="kw">import </span><span class="dt">Control.Monad.IO.Class</span>
<span class="kw">import </span><span class="dt">Control.Applicative</span>
<span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">Safe</span>
<span class="kw">import </span><span class="dt">Data.List.Split</span>

<span class="kw">newtype</span> <span class="dt">Env</span> a <span class="fu">=</span> <span class="dt">Env</span>{<span class="ot"> unEnv ::</span> <span class="dt">MaybeT</span> <span class="dt">IO</span> a }
    <span class="kw">deriving</span>
        ( <span class="dt">Functor</span>
        , <span class="dt">Applicative</span>
        , <span class="dt">Monad</span>
        , <span class="dt">MonadIO</span>
        , <span class="dt">Alternative</span>
        , <span class="dt">MonadPlus</span>
        )

<span class="ot">runEnv ::</span> <span class="dt">Env</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> a)
runEnv <span class="fu">=</span> runMaybeT <span class="fu">.</span> unEnv

<span class="co">-- Lift a `Maybe` into the `Env` context.</span>
<span class="ot">liftMaybe ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> <span class="dt">Env</span> a
liftMaybe <span class="fu">=</span> <span class="dt">Env</span> <span class="fu">.</span> <span class="dt">MaybeT</span> <span class="fu">.</span> pure

<span class="co">-- Get an environment variable in its</span>
<span class="co">-- raw form.</span>
<span class="ot">getEnv ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Env</span> <span class="dt">String</span>
getEnv key <span class="fu">=</span>
    liftIO (lookupEnv key) <span class="fu">&gt;&gt;=</span> liftMaybe

<span class="co">-- Pull an environment variable from</span>
<span class="co">-- the environment, using a parsing</span>
<span class="co">-- function for conversion.</span>
<span class="ot">env ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a) <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Env</span> a
env f key <span class="fu">=</span> liftMaybe <span class="fu">.</span> f <span class="fu">=&lt;&lt;</span> getEnv key

<span class="co">-- Pull an optional value from the</span>
<span class="co">-- environment.</span>
optional
<span class="ot">    ::</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a)
    <span class="ot">-&gt;</span> <span class="dt">String</span>
    <span class="ot">-&gt;</span> <span class="dt">Env</span> (<span class="dt">Maybe</span> a)
optional f key <span class="fu">=</span>
    (f <span class="fu">&lt;$&gt;</span> getEnv key) <span class="fu">&lt;|&gt;</span> pure <span class="dt">Nothing</span> 

<span class="co">-- Exploit the `Read` interface for a type</span>
<span class="co">-- to read an environment variable.</span>
<span class="ot">readEnv ::</span> <span class="dt">Read</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Env</span> a
readEnv <span class="fu">=</span> env readMay</code></pre></div>
<p>This code was adapted from <a href="https://www.reddit.com/r/haskell/comments/3bckm7/envy_an_environmentally_friendly_way_to_deal_with/csl3nqa/">a comment on reddit</a> (credit to u/Tekmo).</p>
<p>I think this mini-library is “good enough” for a lot of applications. One major drawback is that it doesn’t report missing or improperly formatted environment variables - functionality can be added in a relatively straightforward way, however, with a <code>MonadThrow</code> constraint. This is the simplest thing that does the job well, though, so we’ll run with it.</p>
<p>For my example application, I want to be able to pull configuration information from a set of environment variables.</p>
<p>We can use our mini-library to do this:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">data</span> <span class="dt">Stage</span> 
  <span class="fu">=</span> <span class="dt">Testing</span>
  <span class="fu">|</span> <span class="dt">Development</span>
  <span class="fu">|</span> <span class="dt">Staging</span> 
  <span class="fu">|</span> <span class="dt">Production</span>
    <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)

<span class="kw">data</span> <span class="dt">Version</span> <span class="fu">=</span> <span class="dt">Version</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="dt">Int</span>
    <span class="kw">deriving</span> <span class="dt">Show</span>

<span class="kw">data</span> <span class="dt">MyEnvironment</span> <span class="fu">=</span> <span class="dt">MyEnvironment</span>
    {<span class="ot"> stage ::</span> <span class="dt">Stage</span>
    ,<span class="ot"> identifier ::</span> <span class="dt">Maybe</span> <span class="dt">String</span>
    ,<span class="ot"> version ::</span> <span class="dt">Version</span>
    } <span class="kw">deriving</span> (<span class="dt">Show</span>)

<span class="co">-- Parse a semantic version string like v1.3.3</span>
<span class="ot">parseVersion ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Version</span>
parseVersion versionString <span class="fu">=</span>
    <span class="kw">case</span> splitOn <span class="st">&quot;.&quot;</span> semver <span class="kw">of</span>
         [major, minor, patch] <span class="ot">-&gt;</span>
             <span class="dt">Version</span>
                <span class="fu">&lt;$&gt;</span> readMay major
                <span class="fu">&lt;*&gt;</span> readMay minor
                <span class="fu">&lt;*&gt;</span> readMay patch
         _ <span class="ot">-&gt;</span> <span class="dt">Nothing</span>
    <span class="kw">where</span> semver <span class="fu">=</span> tail versionString

<span class="co">-- An environment reader for `MyEnvironment`</span>
<span class="ot">myEnv ::</span> <span class="dt">Env</span> <span class="dt">MyEnvironment</span>
myEnv <span class="fu">=</span> <span class="dt">MyEnvironment</span>
    <span class="fu">&lt;$&gt;</span> (readEnv <span class="st">&quot;APP_STAGE&quot;</span> <span class="fu">&lt;|&gt;</span> pure <span class="dt">Production</span>)
    <span class="fu">&lt;*&gt;</span> optional <span class="dt">Just</span> <span class="st">&quot;APP_ID&quot;</span>
    <span class="fu">&lt;*&gt;</span> env parseVersion <span class="st">&quot;APP_VERSION&quot;</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> runEnv myEnv <span class="fu">&gt;&gt;=</span> print</code></pre></div>
<p>Running this as an executable <code>my_app</code>, we get the following output (formatting mine):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> <span class="dt">APP_STAGE</span><span class="fu">=</span><span class="dt">Testing</span> <span class="dt">APP_VERSION</span><span class="fu">=</span>v1<span class="fu">.</span><span class="fl">1.1</span> <span class="dt">APP_ID</span><span class="fu">=</span>its_me_mario my_app

<span class="dt">Just</span> (
  <span class="dt">MyEnvironment</span>
    { stage <span class="fu">=</span> <span class="dt">Testing</span>
    , identifier <span class="fu">=</span> <span class="dt">Just</span> <span class="st">&quot;its_me_mario&quot;</span>
    , version <span class="fu">=</span> <span class="dt">Version</span> <span class="dv">1</span> <span class="dv">1</span> <span class="dv">1</span>
    }
  )</code></pre></div>
<p>Or, with some missing/incomplete information:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">$</span> <span class="dt">APP_STAGE</span><span class="fu">=</span>nonexistent <span class="dt">APP_VERSION</span><span class="fu">=</span>v1<span class="fu">.</span><span class="fl">1.4</span> my_app

<span class="dt">Just</span> (
  <span class="dt">MyEnvironment</span>
    { stage <span class="fu">=</span> <span class="dt">Production</span>
    , identifier <span class="fu">=</span> <span class="dt">Nothing</span>
    , version <span class="fu">=</span> <span class="dt">Version</span> <span class="dv">1</span> <span class="dv">1</span> <span class="dv">4</span>
    }
  )</code></pre></div>
<p>What do you use for handling environment variables in Haskell? Do you use environment variables for different purposes that you’d like to see covered? What else would you like to see covered in future Haskell Bits? Let me know in the comments!</p>
<p>Ben</p>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Wed, 22 Feb 2017 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2017-02-22-environment-variables.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>
<item>
    <title>Haskell Bits #3: Connecting to Databases</title>
    <link>http://kovach.me/posts/2017-02-08-connecting-to-databases.html</link>
    <description><![CDATA[
<div class="post_body">
  <p>Today I want to talk about getting Haskell programs to talk to databases.</p>
<p>We’ll set out to build something pretty simple: A single table, filled with records of board games. I want to keep the focus of the post on connecting to various database types, so our board game record will be extremely simple. Here’s an example of the table we’ll be working with:</p>
<table class="checkered full-width">
<thead class="left">
<tr>
<th>
id
</th>
<th>
name
</th>
<th>
designer
</th>
<th>
year
</th>
</tr>
<thead>
<tbody>
<tr>
<td>
1
</td>
<td>
Lords of Waterdeep
</td>
<td>
Peter Lee
</td>
<td>
2012
</td>
</tr>
<tr>
<td>
3
</td>
<td>
Agricola
</td>
<td>
Uwe Rosenberg
</td>
<td>
2007
</td>
</tr>
<tr>
<td>
4
</td>
<td>
Race for the Galaxy
</td>
<td>
Thomas Lehmann
</td>
<td>
2007
</td>
</tr>
</tbody>
</table>
<p>Important note: I originally had “Chess” in here as a board game with no known year, but realized after writing the post and all of the associated code that I don’t know who designed it, either! The <code>designer</code> should technically be nullable as well, but it is not in the schema I’ve defined. Keep that in mind as you read through the post!</p>
<p>I’m going to walk through inserting a single element into a table of the aforementioned schema, but it will support all of the records above. Try inserting them as an exercise!</p>
<p>We’re going to talk about connecting to three different databases:</p>
<ul>
<li>sqlite</li>
<li>postgresql</li>
<li>mysql</li>
</ul>
<p>…with two different “flavors” of libary. First, the lower-level “-simple” strain of database libraries, and later, the higher-level <code>persistent</code> library.</p>
<h3 id="connecting-to-sqlite-with-sqlite-simple">Connecting to <code>sqlite</code> with <code>sqlite-simple</code></h3>
<p>We need a database:</p>
<div class="sourceCode"><pre class="sourceCode sql"><code class="sourceCode sql">$ sqlite3 board_games.db <span class="ot">&quot;CREATE TABLE IF NOT EXISTS board_games (id INTEGER PRIMARY KEY,</span>
name TEXT <span class="kw">NOT</span> <span class="kw">NULL</span>, designer TEXT <span class="kw">NOT</span> <span class="kw">NULL</span>, <span class="dt">year</span> <span class="dt">INTEGER</span>);<span class="ot">&quot;</span></code></pre></div>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE RecordWildCards #-}</span>
<span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>

<span class="kw">import </span><span class="dt">Control.Monad.State</span>
<span class="kw">import </span><span class="dt">Control.Monad.Reader</span>
<span class="kw">import </span><span class="dt">Data.Text</span>
<span class="kw">import </span><span class="dt">Database.SQLite.Simple</span>
<span class="kw">import </span><span class="dt">Data.Maybe</span> (fromJust)

<span class="kw">data</span> <span class="dt">BoardGame</span> <span class="fu">=</span> <span class="dt">BoardGame</span>
    {<span class="ot"> name ::</span> <span class="dt">Text</span>
    ,<span class="ot"> designer ::</span> <span class="dt">Text</span>
    ,<span class="ot"> year ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span>
    } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)

<span class="kw">instance</span> <span class="dt">FromRow</span> <span class="dt">BoardGame</span> <span class="kw">where</span>
    fromRow <span class="fu">=</span> <span class="dt">BoardGame</span> <span class="fu">&lt;$&gt;</span> field <span class="fu">&lt;*&gt;</span> field <span class="fu">&lt;*&gt;</span> field

<span class="kw">instance</span> <span class="dt">ToRow</span> <span class="dt">BoardGame</span> <span class="kw">where</span>
    toRow <span class="dt">BoardGame</span>{<span class="fu">..</span>} <span class="fu">=</span> toRow (name, designer, year)

<span class="ot">createGame ::</span> <span class="dt">BoardGame</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Connection</span> <span class="dt">IO</span> (<span class="dt">Int</span>, <span class="dt">BoardGame</span>)
createGame game <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
    liftIO <span class="fu">$</span> execute
        conn 
        <span class="st">&quot;INSERT INTO board_games (name, designer, year) VALUES (?,?,?)&quot;</span>
        game
    boardGameId <span class="ot">&lt;-</span> fromIntegral <span class="fu">&lt;$&gt;</span> liftIO (lastInsertRowId conn)
    game&#39; <span class="ot">&lt;-</span> fromJust <span class="fu">&lt;$&gt;</span> readGame boardGameId
    pure (boardGameId, game&#39;)

<span class="ot">readGame ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Connection</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">BoardGame</span>)
readGame boardGameId <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
    games <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> query 
        conn
        <span class="st">&quot;SELECT name, designer, year FROM board_games WHERE id = ?&quot;</span>
        (<span class="dt">Only</span> boardGameId)
    pure <span class="fu">$</span> <span class="kw">case</span> games <span class="kw">of</span>
         [g] <span class="ot">-&gt;</span> <span class="dt">Just</span> g
         _ <span class="ot">-&gt;</span> <span class="dt">Nothing</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
    conn <span class="ot">&lt;-</span> open <span class="st">&quot;board_games.db&quot;</span>
    flip runReaderT conn <span class="fu">$</span> <span class="kw">do</span>
        result <span class="ot">&lt;-</span> createGame <span class="fu">$</span> <span class="dt">BoardGame</span>
            <span class="st">&quot;Cosmic Encounter&quot;</span>
            <span class="st">&quot;Bill Eberle&quot;</span>
            (<span class="dt">Just</span> <span class="dv">2008</span>)
        liftIO <span class="fu">$</span> print result</code></pre></div>
<p>(packages needed: <code>sqlite-simple</code>, <code>mtl</code>, <code>text</code>)</p>
<p>This is the core logic we’ll be implementing with each library. We’ll just be modifying this piecemeal for the rest of the implementations. It’s the longest code sample in the post, so don’t run off!</p>
<p>Let’s walk through this a little, just once. Here’s what we’re doing:</p>
<ul>
<li>Creating a connection (called <code>conn</code>)</li>
<li>Storing it in a read-only environment with <code>ReaderT</code> computations</li>
<li>Creating a new record for Cosmic Encounter</li>
<li>Then printing it, along with its id in the database.</li>
</ul>
<p>In order to do this, we have to write a little bit of boilerplate. First is the model definition for <code>BoardGame</code>, and instances of <code>ToRow</code> and <code>FromRow</code>, which allow us to serialize and deserialize from the <code>sqlite</code> representation of a <code>BoardGame</code>. We also have to write the actual SQL commands; not a whole lot is abstracted away from us.</p>
<p>(I lied a little - the model definition is not strictly necessary but it’s typically good to pull data into your program’s domain, so I suggest doing this step.)</p>
<h3 id="connecting-to-postgresql-with-postgresql-simple">Connecting to <code>postgresql</code> with <code>postgresql-simple</code></h3>
<p>We’ll need a database, again (note the syntax is slightly different):</p>
<div class="sourceCode"><pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">TABLE</span> <span class="kw">IF</span> <span class="kw">NOT</span> <span class="kw">EXISTS</span> board_games (
  <span class="kw">id</span> SERIAL <span class="kw">PRIMARY</span> <span class="kw">KEY</span>,
  name TEXT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  designer TEXT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  <span class="dt">year</span> <span class="dt">INTEGER</span>
);</code></pre></div>
<p>Otherwise, we don’t have a ton to change. We only have to touch a few things:</p>
<ul>
<li>The way that we procure a <code>Connection</code> is slightly different, because we’re no longer using a flat file</li>
<li><code>lastInsertRowId</code> is not a primitive. Postgres supports <code>RETURNING</code> syntax so we can get the <code>id</code> when we insert.</li>
<li>The imports have to change.</li>
</ul>
<p>That’s actually…it. Here are the imports we need:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Database.PostgreSQL.Simple</span>
<span class="kw">import </span><span class="dt">Database.PostgreSQL.Simple.FromRow</span>
<span class="kw">import </span><span class="dt">Database.PostgreSQL.Simple.ToRow</span></code></pre></div>
<p>Here is the new <code>createGame</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">createGame ::</span> <span class="dt">BoardGame</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Connection</span> <span class="dt">IO</span> (<span class="dt">Int</span>, <span class="dt">BoardGame</span>)
createGame game <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
    [<span class="dt">Only</span> boardGameId] <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> query
        conn 
        <span class="st">&quot;INSERT INTO board_games (name, designer, year) VALUES (?,?,?) RETURNING id&quot;</span>
        game
    game&#39; <span class="ot">&lt;-</span> fromJust <span class="fu">&lt;$&gt;</span> readGame boardGameId
    pure (boardGameId, game&#39;)</code></pre></div>
<p>And here is the new connection procuring mechanism (this uses a <a href="https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNSTRING">postgres connection string</a>, so suit it to your needs):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Inside `main`:</span>
conn <span class="ot">&lt;-</span> connectPostgreSQL <span class="st">&quot;host=localhost port=5432 connect_timeout=10&quot;</span></code></pre></div>
<p>(packages needed: <code>postgresql-simple</code>, <code>mtl</code>, <code>text</code>)</p>
<p><a href="https://gist.github.com/5outh/31acec58bbd91413d71a0df2638fe899">Check out the full source here</a>.</p>
<h3 id="connecting-to-mysql-with-mysql-simple">Connecting to <code>mysql</code> with <code>mysql-simple</code></h3>
<p>The last database we’ll get this running on is <code>mysql</code>. <code>mysql-simple</code> was the original “-simple” library for database management. However, it’s also the most different.</p>
<p>First, creating the table:</p>
<div class="sourceCode"><pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">TABLE</span> `board_games` (
  `id` <span class="dt">int</span>(<span class="dv">11</span>) unsigned <span class="kw">NOT</span> <span class="kw">NULL</span> AUTO_INCREMENT,
  `name` <span class="dt">varchar</span>(<span class="dv">64</span>) <span class="kw">NOT</span> <span class="kw">NULL</span> <span class="kw">DEFAULT</span> <span class="st">&#39;&#39;</span>,
  `designer` <span class="dt">varchar</span>(<span class="dv">64</span>) <span class="kw">NOT</span> <span class="kw">NULL</span> <span class="kw">DEFAULT</span> <span class="st">&#39;&#39;</span>,
  `year` <span class="dt">int</span>(<span class="dv">4</span>) <span class="kw">DEFAULT</span> <span class="kw">NULL</span>,
  <span class="kw">PRIMARY</span> <span class="kw">KEY</span> (`id`)
) ENGINE=InnoDB <span class="kw">DEFAULT</span> CHARSET=utf8;</code></pre></div>
<p>We’ll need the language extension <code>BangPatterns</code> (not necessary, but recommended):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE BangPatterns #-}</span></code></pre></div>
<p>and some updated imports:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Database.MySQL.Simple</span>
<span class="kw">import </span><span class="dt">Database.MySQL.Simple.QueryParams</span>
<span class="kw">import </span><span class="dt">Database.MySQL.Simple.QueryResults</span>
<span class="kw">import </span><span class="dt">Database.MySQL.Simple.Param</span>
<span class="kw">import </span><span class="dt">Database.MySQL.Simple.Result</span></code></pre></div>
<p>Our <code>BoardGame</code> type can stay the same, but <code>ToRow</code> and <code>FromRow</code> get replaced with the typeclasses <code>QueryParams</code> and <code>QueryResults</code> respectively. Their interfaces are a little different too:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">instance</span> <span class="dt">QueryParams</span> <span class="dt">BoardGame</span> <span class="kw">where</span>
    renderParams <span class="dt">BoardGame</span>{<span class="fu">..</span>} <span class="fu">=</span> [render name, render designer, render year]

<span class="kw">instance</span> <span class="dt">QueryResults</span> <span class="dt">BoardGame</span> <span class="kw">where</span>
    convertResults [fa,fb,fc] [va,vb,vc] <span class="fu">=</span> <span class="dt">BoardGame</span> a b c 
        <span class="kw">where</span> <span class="fu">!</span>a <span class="fu">=</span> convert fa va
              <span class="fu">!</span>b <span class="fu">=</span> convert fb vb
              <span class="fu">!</span>c <span class="fu">=</span> convert fc vc
    convertResults fs vs  <span class="fu">=</span> convertError fs vs <span class="dv">3</span></code></pre></div>
<p>We need to go back to selecting the last insert id, but there’s no primitive for that, so we inline it and make some small modifications to <code>createGame</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">createGame ::</span> <span class="dt">BoardGame</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Connection</span> <span class="dt">IO</span> (<span class="dt">Int</span>, <span class="dt">BoardGame</span>)
createGame game <span class="fu">=</span> ask <span class="fu">&gt;&gt;=</span> \conn <span class="ot">-&gt;</span> <span class="kw">do</span>
    liftIO <span class="fu">$</span> execute
        conn 
        <span class="st">&quot;INSERT INTO board_games (name, designer, year) VALUES (?,?,?)&quot;</span>
        game
    [<span class="dt">Only</span> boardGameId] <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> query_ conn <span class="st">&quot;SELECT LAST_INSERT_ID()&quot;</span>
    game&#39; <span class="ot">&lt;-</span> fromJust <span class="fu">&lt;$&gt;</span> readGame boardGameId 
    pure (boardGameId, game&#39;)</code></pre></div>
<p>Connection info is provided using <code>ConnectInfo</code> instead of a postgres connection string:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">connectInfo ::</span> <span class="dt">ConnectInfo</span>
connectInfo <span class="fu">=</span> defaultConnectInfo
    { connectDatabase <span class="fu">=</span> <span class="st">&quot;board_games&quot;</span>
    }</code></pre></div>
<p>The last step is to swap the connection line in <code>main</code> to:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Inside main</span>
conn <span class="ot">&lt;-</span> connect connectInfo </code></pre></div>
<p>(packages needed: <code>postgresql-simple</code>, <code>mtl</code>, <code>text</code>)</p>
<p><a href="https://gist.github.com/5outh/5b53643979fb510ded470f8c0bb449e3">Check out the full source here</a></p>
<p>These libraries are not all that different - they’re all inspired by one-another. You may find documentation or tutorials that use one of these libraries and need to use another; I hope this helps translate between the languages of the three.</p>
<p>Next, I’d like to talk about <code>persistent</code>. <code>persistent</code> is a higher-level, more fully featured set of database tooling. It’s a lot more “magical” than the “-simple” libraries, but removes the necessity of some of the boilerplate and inlining of raw SQL that comes with the “-simple” variants. It’s also backend-agnostic which makes for a uniform interface.</p>
<h3 id="connecting-to-sqlite-with-persistent">Connecting to <code>sqlite</code> with <code>persistent</code></h3>
<p>We’ll need a data type definition in <code>persistent</code>’s template haskell DSL, which we’ll put in a module called <code>Types</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span>
<span class="ot">{-# LANGUAGE QuasiQuotes #-}</span>
<span class="ot">{-# LANGUAGE TypeFamilies #-}</span>
<span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span>
<span class="ot">{-# LANGUAGE GADTs #-}</span>
<span class="ot">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span>

<span class="kw">module</span> <span class="dt">Types</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Database.Persist.TH</span>

share [mkPersist sqlSettings, mkMigrate <span class="st">&quot;migrateAll&quot;</span>] [persistLowerCase<span class="fu">|</span>
<span class="dt">BoardGame</span> sql<span class="fu">=</span>board_games
    name <span class="dt">String</span>
    designer <span class="dt">String</span>
    year <span class="dt">Int</span> <span class="dt">Maybe</span>

    <span class="dt">UniqueName</span> name

    <span class="kw">deriving</span> <span class="dt">Show</span>
<span class="fu">|</span>]</code></pre></div>
<p>The translated source:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span>

<span class="kw">import </span><span class="dt">Types</span>

<span class="kw">import </span><span class="dt">Database.Persist.Sqlite</span>
<span class="kw">import </span><span class="dt">Control.Monad.Logger</span>
<span class="kw">import </span><span class="dt">Control.Monad.IO.Class</span>

<span class="ot">printIO ::</span> (<span class="dt">MonadIO</span> m, <span class="dt">Show</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> m ()
printIO <span class="fu">=</span> liftIO <span class="fu">.</span> print

<span class="ot">createGame ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">BoardGame</span> <span class="ot">-&gt;</span> <span class="dt">SqlPersistT</span> m (<span class="dt">Entity</span> <span class="dt">BoardGame</span>) 
createGame <span class="fu">=</span> insertEntity

<span class="ot">readGame ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">SqlPersistT</span> m (<span class="dt">Maybe</span> <span class="dt">BoardGame</span>) 
readGame <span class="fu">=</span> get <span class="fu">.</span> toSqlKey <span class="fu">.</span> fromIntegral

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> 
    runStdoutLoggingT
        <span class="fu">.</span> withSqlitePool <span class="st">&quot;board_games.db&quot;</span> <span class="dv">3</span>
        <span class="fu">.</span> runSqlPool
        <span class="fu">$</span> <span class="kw">do</span>
            result <span class="ot">&lt;-</span> createGame <span class="fu">$</span> <span class="dt">BoardGame</span>
                <span class="st">&quot;Cosmic Encounter&quot;</span>
                <span class="st">&quot;Bill Eberle&quot;</span>
                (<span class="dt">Just</span> <span class="dv">2008</span>)
            liftIO <span class="fu">$</span> print result

            <span class="co">-- This is the easiest way to re-read a record:</span>
            get (entityKey result) <span class="fu">&gt;&gt;=</span> printIO 

            <span class="co">-- Getting by id</span>
            readGame <span class="dv">1</span> <span class="fu">&gt;&gt;=</span> printIO 
            
            <span class="co">-- Get by name too:</span>
            getBy (<span class="dt">UniqueName</span> <span class="st">&quot;Cosmic Encounter&quot;</span>) <span class="fu">&gt;&gt;=</span> printIO </code></pre></div>
<p>(packages needed: <code>persistent</code>, <code>persistent-template</code>, <code>persistent-sqlite</code>, <code>mtl</code>, <code>monad-logger</code>)</p>
<p>A couple of things:</p>
<ul>
<li><code>SqlPersistT</code> can be thought of as a “SQL Statement Context” - you can write arbitrary queries in these blocks. <em>Each of these is run in its own transaction by default, so be careful! Any exceptions will roll back any changes.</em> (thanks to /u/ephrion for bringing up this point!)</li>
<li><code>BoardGame</code> and <code>UniqueName</code> are types generated by the template haskell in the <code>Types</code> module.</li>
<li>This uses a connection pool with 3 open connections. You can also create a single connection with <code>withSqliteConn</code> instead of <code>withSqlitePool</code>.</li>
<li><code>Entity</code> is a type consisting of a <code>Key</code> and a model (in our case, <code>BoardGame</code>) - this is analogous to <code>(Int, BoardGame)</code> with the <code>-simple</code> libraries.</li>
<li><code>runStdoutLoggingT</code> prints debug SQL statements to stdout. It can be replaced with <code>runNoLoggingT</code> or <code>runStderrLoggingT</code> to modify this behavior.</li>
</ul>
<p>This is just the tip of the iceberg. See <a href="http://www.yesodweb.com/book/persistent">the Yesod book’s chapter on persistent</a>, the <a href="https://www.stackage.org/lts-8.0/package/persistent-2.6">persistent documentation</a> and specifically the <a href="https://www.stackage.org/haddock/lts-8.0/persistent-2.6/Database-Persist-Class.html">Database.Persist.Class module</a> for more information.</p>
<p>Also see the <a href="https://www.stackage.org/package/persistent-sqlite">persistent-sqlite documentation</a>.</p>
<h3 id="connecting-to-postgres-with-persistent">Connecting to <code>postgres</code> with <code>persistent</code></h3>
<p>Change the <code>Database.Persist.Sqlite</code> import to <code>Database.Persist.Postgres</code>.</p>
<p>The only other thing to change in order to connect to <code>postgres</code> instead is the second line of <code>main</code>, to:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.</span> withPostgresqlPool <span class="st">&quot;host=localhost port=5432 connect_timeout=10&quot;</span> <span class="dv">3</span></code></pre></div>
<p>(packages needed: <code>persistent</code>, <code>persistent-template</code>, <code>persistent-postgresql</code>, <code>mtl</code>, <code>monad-logger</code>)</p>
<p>Everything else works the same!</p>
<p><a href="https://gist.github.com/5outh/d2f6a8762701928ceb967d25710c7ed1">View the full source here</a></p>
<p>And the <a href="https://www.stackage.org/lts-8.0/package/persistent-postgresql-2.6">persistent-postgresql documentation</a></p>
<h3 id="connecting-to-mysql-with-persistent">Connecting to <code>mysql</code> with <code>persistent</code></h3>
<p>Connecting to mysql is almost as simple. Change the import to <code>Database.Persist.MySQL</code>, add the <code>ConnectInfo</code> definition:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">connectInfo ::</span> <span class="dt">ConnectInfo</span>
connectInfo <span class="fu">=</span> defaultConnectInfo
    { connectDatabase <span class="fu">=</span> <span class="st">&quot;board_games&quot;</span>
    }</code></pre></div>
<p>and change the same line in <code>main</code> to:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">.</span> withMySQLPool connectInfo <span class="dv">3</span></code></pre></div>
<p>(packages needed: <code>persistent</code>, <code>persistent-template</code>, <code>persistent-mysql</code>, <code>mtl</code>, <code>monad-logger</code>)</p>
<p>Again, everything else works the same.</p>
<p><a href="https://gist.github.com/5outh/b9d80d7fc174ae5aa87818dfd5158362">View the full source here</a></p>
<p>And the <a href="https://www.stackage.org/lts-8.0/package/persistent-mysql-2.6">persistent-mysql documentation</a></p>
<p>I’ve never attempted to run a database-backed haskell application on Windows, so I must apologize for not showing off how to connect to SQL Server. AFAIK, the only current package that supports this is <a href="https://github.com/hdbc/hdbc">HDBC</a>, which I’ve not used.</p>
<p>What is your preferred way of interacting with databases in Haskell? Which database do you think is the most pleasant to work with? What parts of this post would you like to see expanded on in the future? Let me know in the comments!</p>
<p>Ben</p>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Wed, 08 Feb 2017 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2017-02-08-connecting-to-databases.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>
<item>
    <title>Haskell Bits #2: Application Beginnings</title>
    <link>http://kovach.me/posts/2017-02-03-haskell-bits-application-beginnings.html</link>
    <description><![CDATA[
<div class="post_body">
  <p>Are you comfortable creating data types, manipulating lists, composing functions, etc, but not sure how to make a “useful program” with haskell? This is a very common stumbling block when learning. It might be the complaint I’ve heard the most.</p>
<p>In this <em>Haskell Bit</em>, I want to walk through a pattern I have commonly seen in haskell applications. The pattern isn’t specific to haskell - it’s commonplace in tons of programming environments. It’s just a little less obvious how to get here with Haskell.</p>
<p>Here’s the pattern:</p>
<ul>
<li>Read some configuration (we’ll read it from the environment)</li>
<li>Set up some program state that will be manipulated over the course of the program</li>
<li>Run the program!</li>
</ul>
<p>The <a href="https://hackage.haskell.org/package/mtl"><code>mtl</code></a> package will need to be installed to run these examples.</p>
<p>In haskell, we have to be explicit about our the shape of our state and environment. A common way to represent a program with access to these basic needs, and not much else, is with the following data type:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad.Reader</span>
<span class="kw">import </span><span class="dt">Control.Monad.State</span>

<span class="kw">type</span> <span class="dt">Program</span> state config a <span class="fu">=</span> <span class="dt">StateT</span> state (<span class="dt">ReaderT</span> config <span class="dt">IO</span>) a</code></pre></div>
<p>This data type expresses the following:</p>
<ul>
<li>We can read and manipulate the internal state of our program (of type <code>state</code>)</li>
<li>We can read (and only read) values of type <code>config</code> in our program</li>
<li>We can access IO</li>
</ul>
<p>For those who aren’t familiar, this is called a “monad transformer stack”. It’s just an expression of the effects our program can have.</p>
<p>With this, we’re going to build something extremely contrived. It should demonstrate the utility of this pattern, however. Here’s what we’ll do:</p>
<ul>
<li>Read two environment variables, <code>COUNT_BY</code>, and <code>COUNT_UP_TO</code></li>
<li>It will start at <code>0</code>, and count by <code>COUNT_BY</code> steps, up to <code>COUNT_UP_TO</code>, printing out each value.</li>
</ul>
<p>To do this, we need IO (to print), a read-only environment (to store the environment variables in), and some state (the current count). Sounds like it fits the pattern. Let’s see what it looks like!</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad.State</span>
<span class="kw">import </span><span class="dt">Control.Monad.Reader</span>
<span class="kw">import </span><span class="dt">Control.Monad.IO.Class</span>
<span class="kw">import </span><span class="dt">Data.Monoid</span>
<span class="kw">import </span><span class="dt">System.Environment</span>

<span class="kw">type</span> <span class="dt">Program</span> state config a <span class="fu">=</span> <span class="dt">StateT</span> state (<span class="dt">ReaderT</span> config <span class="dt">IO</span>) a

<span class="co">-- Run a `Program` with a given state and config, returning</span>
<span class="co">-- a final value and the final state of the `Program`</span>
<span class="ot">runProgram ::</span> <span class="dt">Program</span> s c a <span class="ot">-&gt;</span> s <span class="ot">-&gt;</span> c <span class="ot">-&gt;</span> <span class="dt">IO</span> (a, s)
runProgram p s c <span class="fu">=</span> runReaderT (runStateT p s) c

<span class="kw">data</span> <span class="dt">CounterState</span> <span class="fu">=</span> <span class="dt">CounterState</span> {<span class="ot"> currentCount ::</span> <span class="dt">Integer</span> }

<span class="kw">data</span> <span class="dt">CounterConfig</span> <span class="fu">=</span> <span class="dt">CounterConfig</span>
    {<span class="ot"> countBy ::</span> <span class="dt">Integer</span>
    ,<span class="ot"> countUpTo ::</span> <span class="dt">Integer</span>
    }

<span class="co">-- A more specific type for our Counter program</span>
<span class="kw">type</span> <span class="dt">Counter</span> a <span class="fu">=</span> <span class="dt">Program</span> <span class="dt">CounterState</span> <span class="dt">CounterConfig</span> a

<span class="co">-- The initial state we&#39;re starting with</span>
<span class="ot">initialState ::</span> <span class="dt">CounterState</span>
initialState <span class="fu">=</span> <span class="dt">CounterState</span> <span class="dv">0</span>

<span class="co">-- Some code to read from our environment variables.</span>
<span class="co">-- Note: This is unsafe, and if either environment variable is</span>
<span class="co">-- a) not set, or</span>
<span class="co">-- b) not formatted like an integer,</span>
<span class="co">-- the program will currently error out.</span>
<span class="ot">getConfig ::</span> <span class="dt">IO</span> <span class="dt">CounterConfig</span>
getConfig <span class="fu">=</span> <span class="kw">do</span>
    countBy&#39; <span class="ot">&lt;-</span> read <span class="fu">&lt;$&gt;</span> getEnv <span class="st">&quot;COUNT_BY&quot;</span>  
    countUpTo&#39; <span class="ot">&lt;-</span> read <span class="fu">&lt;$&gt;</span> getEnv <span class="st">&quot;COUNT_UP_TO&quot;</span>
    pure <span class="fu">$</span> <span class="dt">CounterConfig</span> countBy&#39; countUpTo&#39; 

<span class="co">-- Our actual program (&quot;business logic&quot;)</span>
<span class="ot">counter ::</span> <span class="dt">Counter</span> () 
counter <span class="fu">=</span> <span class="kw">do</span>
    count <span class="ot">&lt;-</span> gets currentCount
    countUpTo&#39; <span class="ot">&lt;-</span> lift <span class="fu">$</span> asks countUpTo

    unless (count <span class="fu">&gt;</span> countUpTo&#39;) <span class="fu">$</span> <span class="kw">do</span>
        liftIO <span class="fu">.</span> putStrLn <span class="fu">$</span> <span class="st">&quot;Current count: &quot;</span> <span class="fu">&lt;&gt;</span> show count 
        countBy&#39; <span class="ot">&lt;-</span> lift <span class="fu">$</span> asks countBy
        <span class="kw">let</span> newCount <span class="fu">=</span> count <span class="fu">+</span> countBy&#39;
        modify (\st <span class="ot">-&gt;</span> st{ currentCount <span class="fu">=</span> newCount })
        counter

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
    config <span class="ot">&lt;-</span> getConfig
    void <span class="fu">$</span> runProgram counter initialState config</code></pre></div>
<p>To run this, assuming it’s compiled to a program called <code>counter</code>:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ <span class="ot">COUNT_BY=</span>13 <span class="ot">COUNT_UP_TO=</span>100 <span class="kw">counter</span>
<span class="kw">Current</span> count: 0
<span class="kw">Current</span> count: 13
<span class="kw">Current</span> count: 26
<span class="kw">Current</span> count: 39
<span class="kw">Current</span> count: 52
<span class="kw">Current</span> count: 65
<span class="kw">Current</span> count: 78
<span class="kw">Current</span> count: 91</code></pre></div>
<p>Not so bad! This is totally enough to get started with some more complex programs. Anything below this point is just polish. I will go into all of these polishing modifications in more detail in later posts.</p>
<p>Anyway, the following things are a little ugly right now, in my opinion:</p>
<ul>
<li>Multiple calls to <code>lift</code> in <code>counter</code></li>
<li>The <code>modify</code> call in <code>counter</code> is not a cute line of code</li>
<li>We’re confined to <code>IO</code> as a base monad</li>
<li>As mentioned in comments, the configuration code will error out. Better to handle specific cases.</li>
</ul>
<p>The first thing I want to do is abolish the <code>lift</code> calls in <code>counter</code>.</p>
<p>We’ll need to add the <code>ConstraintKinds</code> and <code>FlexibleContexts</code> extensions to get this to compile, but here’s an updated program:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">-- Add this to the top of the file:</span>
<span class="ot">{-# LANGUAGE ConstraintKinds#-}</span>
<span class="ot">{-# LANGUAGE FlexibleContexts#-}</span>
<span class="fu">--</span>

<span class="co">-- An interface that describes the effects our program can have.</span>
<span class="kw">type</span> <span class="dt">MonadCounter</span> m <span class="fu">=</span> 
    ( <span class="dt">MonadState</span> <span class="dt">CounterState</span> m
    , <span class="dt">MonadReader</span> <span class="dt">CounterConfig</span> m
    , <span class="dt">MonadIO</span> m
    )

<span class="ot">counter ::</span> <span class="dt">MonadCounter</span> m <span class="ot">=&gt;</span> m () 
counter <span class="fu">=</span> <span class="kw">do</span>
    count <span class="ot">&lt;-</span> gets currentCount
    countUpTo&#39; <span class="ot">&lt;-</span> asks countUpTo

    unless (count <span class="fu">&gt;</span> countUpTo&#39;) <span class="fu">$</span> <span class="kw">do</span>
        liftIO <span class="fu">.</span> putStrLn <span class="fu">$</span> <span class="st">&quot;Current count: &quot;</span> <span class="fu">&lt;&gt;</span> show count 
        countBy&#39; <span class="ot">&lt;-</span> asks countBy
        <span class="kw">let</span> newCount <span class="fu">=</span> count <span class="fu">+</span> countBy&#39;
        modify (\st <span class="ot">-&gt;</span> st{ currentCount <span class="fu">=</span> newCount })
        counter</code></pre></div>
<p>Everything else can stay the same. We’ve begun programming against the <code>MonadCounter</code> interface, which <code>Counter</code> just happens to satisfy, so we can still use our <code>runProgram</code> function. The interface contains the <code>State</code>/<code>Reader</code> functions, but removes the need for <code>lift</code>, which is nice.</p>
<blockquote>
<p>Note: If we remove the <code>MonadIO</code> constraint in <code>MonadCounter</code>, we’re no longer bound to using <code>IO</code> as our program’s base monad. It’s necessary for our current program (since <code>liftIO</code> is called), but for others it may not be.</p>
</blockquote>
<p>Next, let’s handle the ugly call to <code>modify</code>. We can clean this up with lenses. I’ll cover these in greater detail in a later post. For now, we’ll need a separate module, <code>Types</code>, containing the following (we also need the <a href="https://hackage.haskell.org/package/lens"><code>lens</code></a> library):</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span>

<span class="kw">module</span> <span class="dt">Types</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Control.Lens</span>

<span class="kw">data</span> <span class="dt">CounterState</span> <span class="fu">=</span> <span class="dt">CounterState</span>
    { _<span class="ot">currentCount ::</span> <span class="dt">Integer</span>
    }

<span class="kw">data</span> <span class="dt">CounterConfig</span> <span class="fu">=</span> <span class="dt">CounterConfig</span>
    { _<span class="ot">countBy ::</span> <span class="dt">Integer</span>
    , _<span class="ot">countUpTo ::</span> <span class="dt">Integer</span>
    }

<span class="fu">$</span>(makeLenses <span class="ch">&#39;&#39;</span><span class="dt">CounterState</span>)
<span class="fu">$</span>(makeLenses <span class="ch">&#39;&#39;</span><span class="dt">CounterConfig</span>)</code></pre></div>
<p>This will give us lenses for <code>currentCount</code>, <code>countBy</code>, and <code>countUpTo</code>. We can then write <code>counter</code> as:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">counter ::</span> <span class="dt">MonadCounter</span> m <span class="ot">=&gt;</span> m () 
counter <span class="fu">=</span> <span class="kw">do</span>
    count <span class="ot">&lt;-</span> use currentCount
    countUpTo&#39; <span class="ot">&lt;-</span> view countUpTo

    unless (count <span class="fu">&gt;</span> countUpTo&#39;) <span class="fu">$</span> <span class="kw">do</span>
        liftIO <span class="fu">.</span> putStrLn <span class="fu">$</span> <span class="st">&quot;Current count: &quot;</span> <span class="fu">&lt;&gt;</span> show count 
        countBy&#39; <span class="ot">&lt;-</span> view countBy
        currentCount <span class="fu">+=</span> countBy&#39;
        counter</code></pre></div>
<p>I think that’s quite nice and readable.</p>
<p>I’m going to postpone talking about reading environment variables because I want to dedicate a whole <em>Haskell Bit</em> to reading configuration safely, and this one is getting somewhat long.</p>
<p>Is there a topic you would like to see covered in the future? Do you start your projects in a wildly different way? Let me know in the comments!</p>
<p>Ben</p>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Fri, 03 Feb 2017 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2017-02-03-haskell-bits-application-beginnings.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>
<item>
    <title>Haskell Bits #1: Randomness</title>
    <link>http://kovach.me/posts/2017-01-30-haskell-bits-randomness.html</link>
    <description><![CDATA[
<div class="post_body">
  <p>Haskell Bits is a new series of bite-sized posts that I hope will empower people to “get it done and move on”, providing useful information and links to learn more if desired. I’ll be providing full <code>main</code> files in each example (with imports!) to make porting this stuff into your own project as frictionless as possible. This first “Haskell Bit” will cover randomness.</p>
<p>You need at least two things to produce a random number:</p>
<ul>
<li>An initial “seed” value</li>
<li>A pure function that produces a new number from that seed. (“RNG”)</li>
</ul>
<p>That’s all for a single number.</p>
<p>Most programming languages will hide these details from you unless you need them. Most of the time, you can just call <code>random()</code> and get a random number (typically between 0 and 1), using a seed value generated from some system variable that is always changing (current time in very small units is common).</p>
<p>The simplest way to replicate this behavior in Haskell is by using the <code>System.Random</code> module, part of the <a href="https://hackage.haskell.org/package/random-1.1/docs/System-Random.html"><code>random</code></a> package.</p>
<p>We can use <code>randomIO</code> and <code>randomRIO</code> to pull from a global RNG:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Random</span>

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- A random `Double` between 0 and 1</span>
  (<span class="ot">randomIO ::</span> <span class="dt">IO</span> <span class="dt">Double</span>) <span class="fu">&gt;&gt;=</span> print

  <span class="co">-- A random `Int` between 1 and 6 (A die roll)</span>
  randomRIO (<span class="dv">1</span>, <span class="dv">6</span>) <span class="fu">&gt;&gt;=</span> print</code></pre></div>
<p>This is pretty much the interface that most other languages start with. Better would be to separate out IO as much as possible from the inevitable rest of our program. We can do that by confining IO usage to one operation: coming up with an initial RNG.</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Random</span>

<span class="ot">dieRoll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> g <span class="ot">-&gt;</span> (<span class="dt">Int</span>, g)
dieRoll <span class="fu">=</span> randomR (<span class="dv">1</span>, <span class="dv">6</span>)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  <span class="co">-- New generator, generated from the system RNG </span>
  gen <span class="ot">&lt;-</span> newStdGen 

  <span class="kw">let</span> (result, newGen) <span class="fu">=</span> dieRoll gen
  print result

  <span class="kw">let</span> (newResult, newNewGen) <span class="fu">=</span> dieRoll newGen
  print newResult </code></pre></div>
<p>We don’t want to duplicate this code every time we want to add a new die roll. The next logical step would be to sprinkle in some <code>State</code> to store the current RNG in:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Random</span>
<span class="kw">import </span><span class="dt">Control.Monad.State</span>

<span class="ot">dieRoll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">State</span> g <span class="dt">Int</span>
dieRoll <span class="fu">=</span> state (randomR (<span class="dv">1</span>, <span class="dv">6</span>))

<span class="ot">twoDice ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">State</span> g <span class="dt">Int</span>
twoDice <span class="fu">=</span> (<span class="fu">+</span>) <span class="fu">&lt;$&gt;</span> dieRoll <span class="fu">&lt;*&gt;</span> dieRoll

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  gen <span class="ot">&lt;-</span> newStdGen
  print (evalState twoDice gen)</code></pre></div>
<p>Now we can run more complex programs that employ random numbers. Note that <code>newStdGen</code> can be replaced with <code>mkStdGen :: Int -&gt; StdGen</code> if you want to provide an integral seed instead of using the global <code>StdGen</code>.</p>
<p>You can avoid some of the state boilerplate and get a few more benefits by bringing in the <a href="https://hackage.haskell.org/package/MonadRandom-0.5"><code>MonadRandom</code></a> package. Here’s some code that accomplishes the same goal using <code>MonadRandom</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">System.Random</span>
<span class="kw">import </span><span class="dt">Control.Monad.Random</span>

<span class="ot">dieRoll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Int</span>
dieRoll <span class="fu">=</span> getRandomR (<span class="dv">1</span>, <span class="dv">6</span>)

<span class="ot">twoDice ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Int</span>
twoDice <span class="fu">=</span> (<span class="fu">+</span>) <span class="fu">&lt;$&gt;</span> dieRoll <span class="fu">&lt;*&gt;</span> dieRoll

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  gen <span class="ot">&lt;-</span> newStdGen
  print (evalRand twoDice gen)</code></pre></div>
<p>Apart from providing a nice way to write (slightly) terser randomness code, <code>MonadRandom</code> is more explicit about the domain we’re working in, and ships with a couple of killer utilities; namely, the minimalistic sampling functions <code>uniform</code> and <code>fromList</code> (also <code>weighted</code> from <code>MonadRandom 0.5</code>). This program, for example, generates a list of 20 moves that might come up in a Dance Dance Revolution song:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">Control.Monad.Random</span>
<span class="kw">import </span><span class="dt">System.Random</span>

<span class="kw">data</span> <span class="dt">Direction</span> <span class="fu">=</span> <span class="dt">U</span> <span class="fu">|</span> <span class="dt">D</span> <span class="fu">|</span> <span class="dt">L</span> <span class="fu">|</span> <span class="dt">R</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)

<span class="ot">step ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Direction</span>
step <span class="fu">=</span> uniform [<span class="dt">U</span>,<span class="dt">D</span>,<span class="dt">L</span>,<span class="dt">R</span>]

<span class="ot">stepWeighted ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Direction</span>
stepWeighted <span class="fu">=</span>
    fromList [(<span class="dt">U</span>, <span class="dv">1</span>), (<span class="dt">D</span>, <span class="dv">1</span>), (<span class="dt">L</span>, <span class="dv">50</span>), (<span class="dt">R</span>, <span class="dv">100</span>)]

<span class="ot">danceDanceRevolutionScroll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g [<span class="dt">Direction</span>]
danceDanceRevolutionScroll <span class="fu">=</span> replicateM <span class="dv">20</span> <span class="fu">$</span> <span class="kw">do</span>
    weightIt <span class="ot">&lt;-</span> uniform [<span class="dt">True</span>, <span class="dt">False</span>]
    <span class="kw">if</span> weightIt <span class="kw">then</span> stepWeighted <span class="kw">else</span> step

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  gen <span class="ot">&lt;-</span> newStdGen
  print (evalRand danceDanceRevolutionScroll gen)</code></pre></div>
<p><code>fromList</code> lets you specify weights for your random elements. <code>L</code> and <code>R</code> will probably show up a lot more than the other two directions when this is run.</p>
<p><code>MonadRandom</code> supplies some other conveniences as well, but it’s not crazy stuffed with functionality. It’s a nice package that contains the minimal amount of code to be useful but not overengineered.</p>
<p>That said, sometimes you need more. First off, what about different distributions? The normal distribution is a pretty common necessity. <a href="https://hackage.haskell.org/package/random-fu"><code>random-fu</code></a> really shines in this domain. You’ll have to pull in the <a href="https://hackage.haskell.org/package/rvar"><code>rvar</code></a> package as well to run this next example, which will print out a random number pulled from a normal distribution with mean <code>100</code> and a standard deviation of <code>5</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">System.Random</span>
<span class="kw">import </span><span class="dt">Data.Random</span>
<span class="kw">import </span><span class="dt">Data.RVar</span>
<span class="kw">import </span><span class="dt">Control.Monad.State</span>

<span class="ot">normalNumber ::</span> <span class="dt">State</span> <span class="dt">StdGen</span> <span class="dt">Double</span>
normalNumber <span class="fu">=</span> sampleRVar (normal <span class="dv">100</span> <span class="dv">5</span>)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
  gen <span class="ot">&lt;-</span> newStdGen
  print (evalState normalNumber gen)</code></pre></div>
<p>Notice the <code>State</code> pattern from earlier. Also, there a bunch of common distributions that ship with <code>random-fu</code>.</p>
<p>One last thing I should mention is that we’re not tied to <code>StdGen</code>, the RNG that ships with <code>random</code>.</p>
<p>In fact, it does not have strong statistical properties, and should probably be avoided for many “real” applications (See <a href="https://www.reddit.com/r/haskell/comments/3x15sm/why_is_the_first_random_value_produced_from_a/">this reddit post</a>, and thank you to reddit user tom-md for the note!).</p>
<p>There are faster and more stable ones ones, like <code>PureMT</code> from <a href="https://hackage.haskell.org/package/random-source"><code>random-source</code></a> or <code>TFGen</code> from <a href="https://hackage.haskell.org/package/tf-random"><code>tf-random</code></a>. These are both instances of <code>RandomGen</code>, so you can plug either one of those in wherever you saw the generic type signature <code>RandomGen g =&gt; ...</code> in this post. For example, mixing <code>PureMT</code> back into <code>MonadRandom</code>:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Control.Monad.Random</span>
<span class="kw">import </span><span class="dt">Data.Random.Source.PureMT</span>

<span class="ot">dieRoll ::</span> <span class="dt">RandomGen</span> g <span class="ot">=&gt;</span> <span class="dt">Rand</span> g <span class="dt">Int</span>
dieRoll <span class="fu">=</span> getRandomR (<span class="dv">1</span>, <span class="dv">6</span>)

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> newPureMT <span class="fu">&gt;&gt;=</span> print <span class="fu">.</span> evalRand dieRoll </code></pre></div>
<p>Is there anything else you’d like to know about randomness in Haskell? Let me know in the comments!</p>
<p>Ben</p>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Mon, 30 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2017-01-30-haskell-bits-randomness.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>
<item>
    <title>External Stuff</title>
    <link>http://kovach.me/posts/2017-01-27-external-stuff.html</link>
    <description><![CDATA[
<div class="post_body">
  <p>I realized this morning that I don’t have links to any of this external-but-relevant stuff anywhere on the site, and I want to change that just to keep everything in one place!</p>
<p>Last year, I wrote a guest post on Stack Overflow’s hiring blog about my preferred technical interviewing strategy. <a href="https://www.stackoverflowbusiness.com/blog/interviewing-a-developer-try-the-project-walkthrough-technique">You can read about the project walkthrough technique here.</a></p>
<p>I have a YouTube channel! I ran a series called “Breakfast Bash” here containing little blurbs about basic computer science concepts. There’s also a three hour Haskell workshop VOD put together by me and Matt Parsons. <a href="https://www.youtube.com/user/5outhSix">You can see that here.</a></p>
<p>I gave a talk at the Developers of Athens Meetup Group about Lockhart’s Lament and how it applies to programming. <a href="/pdfs/lockharts-lament.key">The slides are here</a>; I would love to give this talk again to a larger crowd.</p>
<p>That’s all for now! Just some stuff I wanted to consolidate.</p>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Fri, 27 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2017-01-27-external-stuff.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>
<item>
    <title>Announcing Trash Kings</title>
    <link>http://kovach.me/posts/2017-01-22-trash-kings.html</link>
    <description><![CDATA[
<div class="post_body">
  <p>I’m working on a tile laying game! It’s called <em>Trash Kings</em>. Here’s the premise:</p>
<blockquote>
<p><em>It’s drop-off day at the dump. As a scavenging rodent, you must do what ever it takes to earn your claim over the wealth of new garbage. Will you gather the best waste and earn the title of Trash King?</em></p>
</blockquote>
<p>Here’s what the prototype looks like:</p>
<p><img width="80%" src="/images/trash_kings_prototype.jpg"></img></p>
<p>In <em>Trash Kings</em>, players place tiles on an expanding board in order to create and claim mounds. Players will gain points based on mounds they claim throughout the game. The player with the most points at the end wins!</p>
<p>The game draws a lot of inspiration from <a href="https://boardgamegeek.com/boardgame/822/carcassonne">Carcassonne</a>, but there are a few mechanics that make it feel unique. In Trash Kings, you have the option of swapping tiles around on the game board in order to create areas to control.</p>
<p>Certain configurations of tiles prevent other players from swapping out important tiles on the game board, and using these is the key to beating out your opponents. Also, the way the game is scored during and at the end of the game differs, necessitating the use of multiple strategies during the course of the game.</p>
<p>You can download the rulebook <a href="/pdfs/trash_kings_rule_book.pdf">here</a>, and a print &amp; play version of the game <a href="/pdfs/game_components.pdf">here</a>.</p>
<p><em>Trash Kings</em> is very much a work in progress. Every time I have played it (with my wife, or alone as multiple players) I tweak something about it. I’m open to any and all feedback, which can be sent to <a href="mailto:bkovach13@gmail.com">bkovach13@gmail.com</a> or left as a comment on this blog post.</p>
<p>Enjoy!</p>
</div>

<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'abstract-nonsense'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>

]]></description>
    <pubDate>Sun, 22 Jan 2017 00:00:00 UT</pubDate>
    <guid>http://kovach.me/posts/2017-01-22-trash-kings.html</guid>
    <dc:creator>Benjamin Kovach</dc:creator>
</item>

    </channel>
</rss>
